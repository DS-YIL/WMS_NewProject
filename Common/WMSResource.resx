<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="checkponoexists" xml:space="preserve">
    <value>select distinct* from wms.wms_polist openpo
        left join wms.wms_securityinward inw on openpo.pono=inw.pono 
        left join wms.wms_pomaterials pomat on pomat.pono=openpo.pono
         left join wms.wms_project pro on pro.pono=openpo.pono
        where openpo.pono='#pono'  
        order by receiveddate desc limit 1</value>
    <comment>checkpono</comment>
  </data>
  <data name="GetdetailsByrequestidWithPO" xml:space="preserve">
    <value>select (select sum(issuedqty) from wms.wms_materialissue  where requestforissueid =req.requestforissueid  ) as issuedqty,max(iss.approvedstatus) as approvedstatus,max(pro.projectname)as projectname,max(req.requestforissueid)as requestforissueid,max(emp."name")as name,req.requesteddate,sk.materialid,max(sk.pono)as pono,
req.requestedquantity,(select sum(availableqty) from wms.wms_stock ws where materialid =sk.materialid ) as availableqty,(select sum(reservedqty) from wms.wms_materialreserve wm where wm.materialid =sk.materialid ) as reservedqty,req.requestid 
from wms.wms_stock sk 
       inner join wms.wms_materialrequest req on req.materialid=sk.materialid
      left join wms.wms_materialissue iss  on iss.requestforissueid=req.requestforissueid
      inner join wms.employee emp on emp.employeeno=req.requesterid
      left join wms.wms_project pro on pro.pono=sk.pono
 where requestid=#requestid and req.deleteflag=false  and sk.pono='#pono'
 group by  req.requestforissueid,sk.materialid--,sk.pono,req.requestedquantity,sk.availableqty,req.requestid,emp."name",req.requesteddate,pro.jobname</value>
  </data>
  <data name="GetListForMaterialRequestByapproverid" xml:space="preserve">
    <value>select Max(issue.approvedstatus) as approvedstatus,req.pono,req.requestid,Max(req.requesteddate) as requesteddate,req.requesterid,emp."name",max(req.requesttype)as requesttype,max(req.returnon)as returnon
        from wms.wms_materialrequest req 
       left join wms.employee emp on req.requesterid=emp.employeeno 
       --left join wms.wms_pomaterials pomat on pomat.pono=po.pono
       --left join wms.wms_project pro on pro.pono=po.pono
       left join wms.wms_materialissue issue on issue.requestforissueid=req.requestforissueid
        --where req.approverid='#approverid'
        group by req.requestid,req.requesterid,emp."name",req.pono  order by req.requestid desc</value>
  </data>
  <data name="GetListForMaterialRequestByrequesterid" xml:space="preserve">
    <value>select * from wms.wms_materialrequest where requesterid='#requesterid'</value>
  </data>
  <data name="getnextrequestid" xml:space="preserve">
    <value>select requestid from wms.wms_materialrequest order by requestid desc limit 1</value>
  </data>
  <data name="Getponodetailsformaterialissue" xml:space="preserve">
    <value>select distinct* from wms.wms_storeinward inw inner join wms.wms_securityinward inwmaster on inwmaster.inwmasterid=inw.inwmasterid  
where  inwmaster.pono='#pono'</value>
    <comment>Getponodetailsformaterialissue</comment>
  </data>
  <data name="insertbarcodedata" xml:space="preserve">
    <value>INSERT INTO wms.wms_barcode(barcodeid,barcode,createddate,createdby,deleteflag,pono,invoiceno)values
(DEFAULT,@barcode,@createddate,@createdby,@deleteflag,@pono,@invoiceno)returning barcodeid</value>
    <comment>barcodedata insertion</comment>
  </data>
  <data name="insertinvoicedata" xml:space="preserve">
    <value>INSERT INTO wms.wms_securityinward(inwmasterid,pono,invoiceno,invoicedate,receivedby,receiveddate,deleteflag,departmentid,suppliername,asnno,inwardremarks,filename,vehicleno,transporterdetails)
VALUES(default,@pono,@invoiceno,@invoicedate,@receivedby,@receiveddate,@deleteflag,@departmentid,@suppliername,@asnno,@inwardremarks,@filename,@vehicleno,@transporterdetails) returning inwmasterid</value>
    <comment>invoice data insertion</comment>
  </data>
  <data name="materialquest" xml:space="preserve">
    <value>INSERT INTO wms.wms_materialrequest(requestforissueid,quantity,approveremailid,approverid,pono,materialid,requesterid,requestid,requestedquantity,requesteddate,deleteflag,projectcode,remarks)VALUES(default,@quantity,@approveremailid,@approverid,@pono,@materialid,@requesterid,@requestid,@requestedquantity,current_date,false,@projectcode,@remarks)</value>
    <comment>insert material request data</comment>
  </data>
  <data name="openpolist" xml:space="preserve">
    <value>select  max(track.enteredon) as enteredon,max(pr.projectcode)as projectcode,max(wp.pono) as pono,min(track.status)as status,max(wp.suppliername )as vendorname,max(pr.jobname) as jobname,  (select  SUM(materialqty) from wms.wms_pomaterials where pono =wp.pono )  as materialqty, (select SUM(confirmqty) from wms.wms_storeinward where inwmasterid in (select inwmasterid from wms.wms_securityinward where pono = wp.pono)) as receivedqty from wms.wms_polist wp left join wms.wms_trackstatus track on track.pono=wp.pono left join wms.wms_project  pr on pr.pono =wp.pono  where projectmanager='#projectmanager'</value>
    <comment>getopenpono list</comment>
  </data>
  <data name="Getdetailsforthreewaymatching" xml:space="preserve">
    <value>select mat.pono,mat.materialid as material,ms.materialdescription,mat.materialqty,sinw.invoiceno,sinw.grnnumber,sinw.receiveddate,
inw.inwardid,inw.qualitychecked,inw.returnedby,inw.returnedon,inw.returnremarks,inw.receivedqty,inw.returnremarks,
qc.qualitypassedqty,qc.qualityfailedqty,qc.qcby as checkedby,
 CASE
     WHEN inw.returnedby is null THEN qc.qualitypassedqty
     ELSE  inw.confirmqty
  END as confirmqty,
CASE
     WHEN inw.returnedby is null THEN qc.qualityfailedqty
     ELSE  inw.returnqty
  END as returnqty,
  CASE
     WHEN inw.qualitycheckrequired is null THEN ms.qualitycheck
     ELSE inw.qualitycheckrequired
  END as qualitycheck
from wms.wms_pomaterials mat
left outer join wms.wms_securityinward sinw on sinw.pono = mat.pono
left outer join wms.wms_storeinward inw on inw.inwmasterid=sinw.inwmasterid
left outer join wms."MaterialMasterYGS" ms on ms.material = mat.materialid
left outer join wms.wms_qualitycheck qc on qc.inwardid = inw.inwardid</value>
  </data>
  <data name="getGRNNo" xml:space="preserve">
    <value>select grnnumber from wms.wms_securityinward   where pono='#pono' and grnnumber is not null 
and deleteflag=false order by grndate desc limit 1</value>
  </data>
  <data name="getinwmasterid" xml:space="preserve">
    <value>select inwmasterid from wms.wms_securityinward where pono='#pono' and invoiceno='#invoiceno' limit 1</value>
  </data>
  <data name="getlocationasresponse" xml:space="preserve">
    <value>select * from wms.wms_stock  stock 
left join wms.wms_rd_bin bins on bins.binid=stock.binid
left join wms.wms_rd_rack rack on rack.rackid=stock.rackid
where itemid=#itemid</value>
  </data>
  <data name="insertforinvoicequery" xml:space="preserve">
    <value>INSERT INTO wms.wms_storeinward(inwmasterid,receiveddate,receivedby,receivedqty,returnqty,qualitypassedqty,confirmqty,materialid,deleteflag,onhold)
VALUES(@inwmasterid,@receiveddate,@receivedby,@receivedqty,@returnqty,@qualitypassedqty,@confirmqty,@materialid,@deleteflag,@onhold)returning inwardid</value>
  </data>
  <data name="insertqueryforlocationhistory" xml:space="preserve">
    <value>INSERT INTO wms.wms_storageallowcationhistorymaster(itemlocation,itemid,createddate,createdby)values(@itemlocation,@itemid,@createddate,@createdby)</value>
  </data>
  <data name="insertqueryforqualitycheck" xml:space="preserve">
    <value>INSERT INTO wms.wms_qualitycheck(inwardid,quality,qtype,qcdate,qcby,remarks,deleteflag)VALUES(@inwardid,@quality,@qtype,@qcdate,@qcby,@remarks,@deleteflag)</value>
  </data>
  <data name="insertqueryforstatusforqty" xml:space="preserve">
    <value>INSERT INTO wms.wms_trackstatus(pono,status,enteredon,returnqty)VALUES(@pono,'Store Checked',current_timestamp,@returnqty)</value>
  </data>
  <data name="insertqueryforstatuswarehouse" xml:space="preserve">
    <value>INSERT INTO wms.wms_trackstatus(pono,status,enteredon)VALUES(@pono,'In Store',current_timestamp)</value>
  </data>
  <data name="insertstock" xml:space="preserve">
    <value>INSERT INTO wms.wms_stock(inwmasterid,stockstatus,pono,binid,rackid ,storeid, vendorid,totalquantity,shelflife,availableqty,deleteflag,itemlocation,createddate,createdby,materialid,inwardid,stcktype,lineitemno)VALUES(@inwmasterid,@stockstatus,@pono,@binid,@rackid,@storeid,@vendorid,@totalquantity,@shelflife,@availableqty,@deleteflag,@itemlocation,@createddate,@createdby,@materialid,@inwardid,@stocktype,@lineitemno)returning itemid</value>
  </data>
  <data name="lastinsertedgrn" xml:space="preserve">
    <value>select * from  wms.wms_sequencemaster  where  enddate&gt;=current_date and id=1</value>
  </data>
  <data name="materialrequestquery" xml:space="preserve">
    <value>select distinct  max(req.ackstatus)as ackstatus,max(issue.issuedqty)as issuedquantity,max(req.requesteddate)as requesteddate,max(issue.approvedstatus)as approvedstatus,max(issue.issuedqty) as issuedqty,max(req.requestforissueid)as requestforissueid,max(issue.approvedstatus) as approvedstatus,req.requestid,max(openpo.pono) as pono,max(openpo.projectname)as projectname,max(openpo.material)as material,max(openpo.materialdescription) as materialdescription,max(openpo.quotationqty) quotationqty,max(req.requestedquantity)as requestedquantity,
max(req.ackremarks)as ackremarks,max(req.reserveid)as reserveid,max(req.projectcode)as projectcode,max(req.remarks)as remarks,CASE WHEN max(req.ackremarks) IS NULL THEN false ELSE true END AS status 
 from   wms.wms_stock  sk left join wms.openpolistview openpo on openpo.pono = sk.pono 
  left join wms.wms_materialrequest req on req.requesterid = '#reqid'
  left join  wms.wms_materialissue issue on issue.requestforissueid=req.requestforissueid</value>
  </data>
  <data name="queryforitemdetails" xml:space="preserve">
    <value>select inwa.inwardid,inwa.lineitemno,inwa.inwardid as inwardidview,bin.binnumber, rack.racknumber, loc.locatorname,mat.rackid,mat.binid,
 mat.storeid,stocks.itemlocation,stocks.availableqty,stocks.itemid,inw.grnnumber,inwa.pono,inwa.pono as securitypo,inw.invoiceno,inw.receiveddate,
 inw.isdirecttransferred,inw.projectcode,emp.name as mrnby,inw.mrnon,inw.mrnremarks,
 inwa.materialqty,inwa.materialid as material,mat.materialdescription,mat.stocktype,inwa.receivedqty,inwa.confirmqty,inwa.returnqty 
 from wms.wms_securityinward inw
left join wms.wms_storeinward inwa on inw.inwmasterid=inwa.inwmasterid
left join wms.wms_stock stocks on  stocks.inwardid=inwa.inwardid
 left join wms."MaterialMasterYGS" mat on inwa.materialid=mat.material
 left join wms.wms_rd_locator loc on loc.locatorid=mat.storeid
 left join wms.wms_rd_rack rack on rack.rackid=mat.rackid
 left join wms.wms_rd_bin bin on bin.binid=mat.binid
 left outer join wms.employee emp on emp.employeeno=inw.mrnby
 where inw.grnnumber='#grnnumber' and inwa.confirmqty &gt; 0</value>
  </data>
  <data name="statusupdatebySecurity" xml:space="preserve">
    <value>INSERT INTO wms.wms_trackstatus(pono,status,enteredon)VALUES(@pono,'Security Checked',current_timestamp)</value>
  </data>
  <data name="updateackstatus" xml:space="preserve">
    <value>update wms.materialrequest set ackstatus=@ackstatus,ackremarks=@ackremarks where requestid=@requestid</value>
  </data>
  <data name="updateapproverstatus" xml:space="preserve">
    <value>insert into wms.wms_materialissue(materialissueid,pono,itemid,requestmaterialid,itemissueddate,itemreceiverid,deleteflag,itemreturnable,approvedby,approvedon,issuedqty,approvedstatus,issuelocation)
values(default,@pono,@itemid,@requestmaterialid,@itemissueddate,@itemreceiverid,false,@itemreturnable,@approvedby,@approvedon,@issuedqty,@approvedstatus,@itemlocation)</value>
  </data>
  <data name="updategrnnumber" xml:space="preserve">
    <value>update wms.wms_securityinward set grnnumber=@grnnumber,grndate=current_date where inwmasterid='#inw' </value>
  </data>
  <data name="updateseqnumber" xml:space="preserve">
    <value>update wms.wms_sequencemaster set sequencenumber=@grnnextsequence where id=@id</value>
  </data>
  <data name="Verifythreewaymatch" xml:space="preserve">
    <value>select Count(*),grnnumber from wms.wms_securityinward inw 
inner join wms.wms_polist openpo on inw.pono=openpo.pono 
where  inw.invoiceno='#invoiceno' and openpo.pono='#pono' group by grnnumber</value>
  </data>
  <data name="getgatepasslist" xml:space="preserve">
    <value>select ygs.materialdescription,emp.name,emp1.name as fmapprover,iss.itemissueddate,gate.remarks as  statusremarks,appr."name"  as approvername,
gate.*,mat.*,iss.*,ygs.* from wms.wms_gatepass gate
   left join wms.wms_gatepassmaterial mat on gate.gatepassid=mat.gatepassid 
   left join wms.employee emp on emp.employeeno=gate.requestedby
    left join wms.employee appr on appr.employeeno=gate.approverid 
	left join wms.employee emp1 on emp1.employeeno=gate.fmapproverid  
   left join wms.wms_materialissue iss on iss.gatepassmaterialid = mat.gatepassmaterialid 
   left join wms."MaterialMasterYGS" ygs on ygs.material=mat.materialid and mat.deleteflag=false 
   where gate.deleteflag=false   order by gate.gatepassid desc</value>
  </data>
  <data name="insertgatepassdata" xml:space="preserve">
    <value>insert into wms.wms_gatepass(gatepassid, gatepasstype, status, referenceno, vehicleno, requestedby, requestedon,deleteflag,vendorname,print,reasonforgatepass,approverid,fmapproverid,fmapprovedstatus,approverstatus,remarks)values(default,@gatepasstype,@status,@referenceno,@vehicleno, @requestedby,@requestedon,@deleteflag,@vendorname,'true',@reasonforgatepass,@approverid,@fmapproverid,@fmapprovedstatus,@approverstatus,@remarks)returning gatepassid</value>
  </data>
  <data name="checkmaterial" xml:space="preserve">
    <value>select * from wms.wms_stock where materialid='#materialid' limit 1</value>
  </data>
  <data name="checkmaterialandqty" xml:space="preserve">
    <value>select sum(availableqty ) as availableqty from wms.wms_stock where materialid='#materialid'</value>
  </data>
  <data name="checkqty" xml:space="preserve">
    <value>select * from wms.wms_stock where availableqty &gt;=#availableqty limit 1</value>
  </data>
  <data name="insertgatepassmaterial" xml:space="preserve">
    <value>insert into wms.wms_gatepassmaterial(gatepassmaterialid,gatepassid,materialid,quantity,deleteflag,remarks,materialcost,expecteddate,issuedqty)
values(default,@gatepassid,@materialid,@quantity,@deleteflag,@remarks,@materialcost,@expecteddate,@issuedqty)</value>
  </data>
  <data name="updategatepass" xml:space="preserve">
    <value>update wms.wms_gatepass set gatepasstype=@gatepasstype,status=@status,referenceno=@referenceno,vehicleno=@vehicleno,requestedby=@requestedby,vendorname=@vendorname,reasonforgatepass=@reasonforgatepass,remarks=@remarks  where gatepassid='#gatepassid'</value>
  </data>
  <data name="updategatepassmaterial" xml:space="preserve">
    <value>update wms.wms_gatepassmaterial set gatepassid=@gatepassid,materialid=@materialid,quantity=@quantity,remarks=@remarks,materialcost=@materialcost,expecteddate=@expecteddate,returneddate=@returneddate where gatepassmaterialid=#gatepassmaterialid</value>
  </data>
  <data name="deletegatepassmaterial" xml:space="preserve">
    <value>update wms.wms_gatepassmaterial set deleteflag='true' where gatepassmaterialid=#gatepassmaterialid</value>
  </data>
  <data name="getgatepassmaterialdetailList" xml:space="preserve">
    <value>select (select sum(issuedqty) from wms.wms_materialissue  where gatepassmaterialid =material.gatepassmaterialid ) as issuedqty
,(select sum(availableqty) from wms.wms_stock ws where materialid =stock.materialid ) as availableqty,
max(material.gatepassid ) as gatepassid,max(material.expecteddate) as expecteddate,max(material.gatepassmaterialid ) as gatepassmaterialid, max(emp."name") as name,max(pass.vendorname) as vendorname,
max(pass.gatepasstype) as gatepasstype,max(pass.approverstatus) as approverstatus,
max(pass.reasonforgatepass) as reasonforgatepass,max(pass.approverremarks ) as approverremarks,max(pass.fmapprovedstatus ) as fmapprovedstatus,max(pass.fmapproverremarks ) as fmapproverremarks,
stock.materialid, max(ygs.materialdescription )as materialdescription, max(material.materialcost )as materialcost,
max(material.quantity ) as quantity,max(material.remarks ) as remarks from wms.wms_stock stock
inner join wms.wms_gatepassmaterial material on material.materialid =stock.materialid 
inner join wms.wms_gatepass pass on pass.gatepassid=material.gatepassid 
 left join wms.wms_materialissue wissue on wissue.gatepassmaterialid  = material.gatepassmaterialid 
 inner join wms.employee emp on pass.requestedby=emp.employeeno
 left join wms."MaterialMasterYGS" ygs on ygs.material=material.materialid
 where pass.gatepassid='#gatepassid' and pass.deleteflag=false and material.deleteflag=false
 group by  material.gatepassmaterialid ,stock.materialid</value>
  </data>
  <data name="updategatepassapproverstatus" xml:space="preserve">
    <value>update wms.wms_gatepass set  status=@status, approverstatus=@approverstatus,approverremarks=@approverremarks,approvedon=@approvedon where gatepassid='#gatepassid'</value>
  </data>
  <data name="checkreprintalreadydone" xml:space="preserve">
    <value>select * from wms.wms_reprinthistory where </value>
  </data>
  <data name="getinwardmasterid" xml:space="preserve">
    <value>select inwmasterid from wms.wms_securityinward where grnnumber='#grnnumber' order by grndate desc limit 1</value>
  </data>
  <data name="getprintdetails" xml:space="preserve">
    <value>select * from wms.wms_gatepass where gatepassid=#gatepassid and deleteflag=false</value>
  </data>
  <data name="insertreprintcount" xml:space="preserve">
    <value>insert into wms.wms_reprinthistory(reprinthistoryid,gatepassid,reprintedon,reprintedby,reprintcount)values(default,@gatepassid,current_date,@reprintedby,@reprintcount)returning reprinthistoryid</value>
  </data>
  <data name="printstatusupdate" xml:space="preserve">
    <value>update wms.wms_gatepass set print=false,printedon=current_date,printedby=@printedby where gatepassid=#gatepassid</value>
  </data>
  <data name="reprintcountupdate" xml:space="preserve">
    <value>update wms.wms_gatepass set reprintedon=current_date,reprintedby=@reprintedby,reprintcount=@reprintcount where gatepassid=#gatepassid</value>
  </data>
  <data name="updatereprintcount" xml:space="preserve">
    <value>update wms.wms_reprinthistory
          set reprintcount=@reprintcount where reprinthistoryid=#reprinthistoryid</value>
  </data>
  <data name="getcategorylist" xml:space="preserve">
    <value>select ws.unitprice,ws.materialid,op.materialdescription,
    sum(availableqty) as availableqty,( SELECT wrc.categoryname
           FROM wms.wms_rd_category wrc
          WHERE ws.unitprice ::numeric &gt;= wrc.minpricevalue::numeric and 
          ws.unitprice ::numeric &lt;= wrc.maxpricevalue::numeric  and wrc.deleteflag=false 
         LIMIT 1) AS category from wms.wms_stock ws
 inner join wms."MaterialMasterYGS" op on  ws.materialid =op.material 
 WHERE ws.materialid IS NOT null and ws.unitprice is not null
group by ws.materialid,op.materialdescription,ws.unitprice</value>
  </data>
  <data name="getcategorylistbymaterailid" xml:space="preserve">
    <value>select itemid, sec.grnnumber , totalquantity,availableqty,totalquantity - availableqty AS issuedqty,itemlocation from
wms.wms_stock ws inner join wms.wms_securityinward sec on sec.pono =ws.pono where ws.materialid='#materialid'</value>
  </data>
  <data name="getitemid" xml:space="preserve">
    <value>select itemid from wms.wms_stock where materialid='#materialid' and pono='#pono' limit 1</value>
  </data>
  <data name="getreportforcategory" xml:space="preserve">
    <value />
  </data>
  <data name="getrequestforissueid" xml:space="preserve">
    <value>select requestforissueid  from wms.wms_materialrequest where materialid='materialid' and pono='#pono' limit 1</value>
  </data>
  <data name="updatelocation" xml:space="preserve">
    <value>update wms.wms_stock set itemlocation='#itemlocation' ,binid=@binid,rackid=@rackid where itemid=#itemid</value>
  </data>
  <data name="insertABCrange" xml:space="preserve">
    <value>insert into wms.wms_rd_category(categoryid,categoryname,minpricevalue,maxpricevalue,createdby,createdon,deleteflag,startdate,enddate)values(default,@categoryname,@minpricevalue,@maxpricevalue,@createdby,current_date,false,@startdate,@enddate)</value>
  </data>
  <data name="updateABCrange" xml:space="preserve">
    <value>update wms.wms_rd_category set deleteflag=true,updatedby=@updatedby,updatedon=@updatedon  where categoryid=#categoryid</value>
  </data>
  <data name="getabccategorydata" xml:space="preserve">
    <value>select * from wms.wms_rd_category where deleteflag=false</value>
  </data>
  <data name="GetABCdetailsBycategory" xml:space="preserve">
    <value>select * from wms.v_getdeailsbycategory  where category like '%abcname'</value>
  </data>
  <data name="GetallavlqtyABCList" xml:space="preserve">
    <value>select Sum(op.unitprice*ws.availableqty) as totalcost,
    sum(availableqty) as availableqty,( SELECT wrc.categoryname
           FROM wms.wms_rd_category wrc
          WHERE op.unitprice ::numeric &gt;= wrc.minpricevalue::numeric and
          (op.unitprice ::numeric &lt;= wrc.maxpricevalue::numeric or op.unitprice ::numeric = wrc.maxpricevalue::numeric is null) and wrc.deleteflag=false
         LIMIT 1) AS category from wms.wms_stock ws
 inner join wms."MaterialMasterYGS" op on  ws.materialid =op.material
 WHERE ws.materialid IS NOT null and op.unitprice is not null
group by category</value>
  </data>
  <data name="getFIFOList" xml:space="preserve">
    <value>select itemid,createddate::date,materialid,mat.materialdescription,itemlocation,shelflife,sk.availableqty ,pono from wms.wms_stock sk inner join  wms."MaterialMasterYGS" mat on mat.material=sk.materialid
where stockstatus='active' and sk.deleteflag=false and availableqty!=0</value>
  </data>
  <data name="checkoldestmaterial" xml:space="preserve">
    <value>select * from wms.wms_stock where materialid='#materialid' and createddate::date&lt;'#createddate'  order by createddate asc limit 1</value>
  </data>
  <data name="insertFIFOdata" xml:space="preserve">
    <value>insert into wms.wms_fifoitemdistribution(fifoid,itemid,materialid,enteredon,pono)values(default,@itemid,@materialid,current_date,@pono)</value>
  </data>
  <data name="updateqtyafterissue" xml:space="preserve">
    <value>update wms.wms_stock set availableqty=(availableqty-#issuedqty) where itemid=#itemid</value>
  </data>
  <data name="getASNList" xml:space="preserve">
    <value>select asno.pono, asno.asn,po.suppliername as vendorname,asno.deliverydate from wms.wms_asn asno left outer join wms.wms_polist po
on asno.pono = po.pono</value>
  </data>
  <data name="updatecyclecountconfig" xml:space="preserve">
    <value>update wms.cyclecountconfig set apercentage=@apercentage,bpercentage=@bpercentage,cpercentage=@cpercentage,cyclecount=@cyclecount,frequency=@frequency where id = #cid</value>
  </data>
  <data name="emailbody" xml:space="preserve">
    <value>&lt;html&gt;&lt;meta charset=\"ISO-8859-1\"&gt;&lt;head&gt;&lt;link rel ='stylesheet' href ='https://maxcdn.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css'&gt;&lt;/head&gt;
&lt;body&gt;&lt;div class='container'&gt;
&lt;p&gt;Dear #user,&lt;/p&gt;
&lt;p&gt;#subbody&lt;/p&gt;
&lt;p&gt;
LINK:
&lt;a href="#link"&gt;#link&lt;/a&gt;&lt;/p&gt;
&lt;p style='margin-bottom:0px;'&gt;Regards,&lt;br/&gt; #sender&lt;/p&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</value>
  </data>
  <data name="getitemlocationList" xml:space="preserve">
    <value>select distinct sum(sk.availableqty)as availableqty,sk.pono,sk.materialid,sk.itemid,sk.itemlocation,ygs.materialdescription,ygs.material,createddate::DATE
from wms.wms_stock sk inner join wms."MaterialMasterYGS" ygs on ygs.material=sk.materialid where materialid='#materialid'
and availableqty&gt;0 --and sk.deleteflag=false
group by sk.itemlocation,ygs.materialdescription,ygs.material,createddate::DATE,itemid</value>
  </data>
  <data name="insertAuthUserData" xml:space="preserve">
    <value>insert into wms.auth_users(authid,employeeid,roleid,createddate,createdby,deleteflag)values(default,@employeeid,@roleid,@createddate,@createdby,@deleteflag)returning authid</value>
  </data>
  <data name="getUserAcessNames" xml:space="preserve">
    <value>select * from wms.v_getAccessList where employeeid='#employeeid' and roleid =#roleid</value>
  </data>
  <data name="verifyGRNgenerated" xml:space="preserve">
    <value>select grnnumber from wms.wms_securityinward inw 
inner join wms.wms_polist openpo on inw.pono=openpo.pono 
where  inw.invoiceno='#invoiceno' and openpo.pono='#pono'</value>
  </data>
  <data name="getInvoiceDetails" xml:space="preserve">
    <value>select sinward.grnnumber,sinward.invoiceno, 
      sum(storeinward .receivedqty) as receivedqty, sum(storeinward.returnqty) as returnedqty,
      sum(storeinward.confirmqty) as confirmedqty from wms.wms_securityinward sinward
left join wms.wms_storeinward storeinward on sinward.inwmasterid = storeinward.inwmasterid 
where sinward.pono = '#pono' group by sinward.grnnumber,sinward.invoiceno</value>
    <comment>get invoice details and qty received , returned and confirmed</comment>
  </data>
  <data name="getLocationDetails" xml:space="preserve">
    <value>select  sk.itemlocation ,sk.materialid, sk.availableqty
 from wms.wms_securityinward sec 
 left join wms.wms_stock sk on sec.inwmasterid = sk.inwmasterid
left join wms."MaterialMasterYGS"  mtmaster on mtmaster.material= sk.materialid
where sec.grnnumber ='#grn' and sk.materialid ='#materialid' and sk.availableqty!=0</value>
    <comment>get location details for material</comment>
  </data>
  <data name="getMaterialDetails" xml:space="preserve">
    <value>select mat.quantity as quantity,sum(req.requestedquantity)as requestedquantity,sum(res.reservedqty)as reservedqty,matiss.issuedqty as qtyissued,sec.grnnumber,openpo.material as materialid, (select sum(availableqty) from wms.wms_stock ws where materialid =sk.materialid) as qtyavailable,max(sk.totalquantity ) as qtytotal from wms.wms_stock sk left  join wms.wms_materialissue matiss on matiss.itemid=sk.itemid left join wms.wms_materialreserve res on res.itemid=sk.itemid left join wms.wms_securityinward sec on sec.inwmasterid=sk.inwmasterid left  join wms.openpolistview openpo on sec.pono = openpo.pono left join wms.wms_materialrequest req on req.pono=sk.pono left join wms.wms_gatepassmaterial mat on mat.materialid=sk.materialid where  --matiss.issuedqty is not null  and sec.grnnumber='#grn' group by sec.grnnumber,openpo.material,matiss.issuedqty,mat.quantity,sk.inwmasterid</value>
    <comment>get material details based on grn number</comment>
  </data>
  <data name="getMaterialRequestDetails" xml:space="preserve">
    <value>select '' as jobname, inw.confirmqty,sec.grnnumber,sec.pono,mtmaster.materialdescription,sec.inwmasterid,
mtmaster.material
 from wms.wms_securityinward sec left join wms.wms_storeinward inw on inw.inwmasterid=sec.inwmasterid
  join wms.wms_polist openpo on sec.pono = openpo.pono
 join wms."MaterialMasterYGS"  mtmaster on mtmaster.material= '#materialid'
where sec.grnnumber ='#grnnumber' and inw.materialid ='#materialid'</value>
    <comment>get material requested and issued details</comment>
  </data>
  <data name="getpolist" xml:space="preserve">
    <value>select pl.pono,sum(pomat.materialqty) as qty from wms.wms_polist pl
join wms.wms_pomaterials pomat on pl.pono= pomat.pono 
group by pl.pono</value>
    <comment>get list of PO Numbers</comment>
  </data>
  <data name="string1" xml:space="preserve">
    <value />
  </data>
  <data name="getmaterialdetailfprrequest" xml:space="preserve">
    <value>select max(sk.pono) as pono ,sk.materialid as material,Max(prj.projectmanager) as projectmanager,
( select sum(availableqty) from wms.wms_stock ws where materialid =sk.materialid) as availableqty,
max(mtmtr.stocktype) as stocktype,max(po.suppliername) as suppliername,
max(mtmtr.unitprice) as materialcost,max(mtmtr.materialdescription) as materialdescription from wms.wms_stock  sk 
left outer join wms."MaterialMasterYGS" mtmtr on mtmtr.material = sk.materialid
left outer join wms.wms_project prj on prj.pono = sk.pono
left outer join wms.wms_polist po on po.pono = sk.pono
where sk.availableqty &gt; 0 and (prj.projectmanager = '#manager' or sk.returnid is not null)</value>
  </data>
  <data name="issuedqtydetails" xml:space="preserve">
    <value>select max(iss.materialissueid)as materialissueid,max(sk.itemid)as itemid,max(req.returnqty)as returnqty,max(sk.itemlocation)as itemlocation, max(iss.approvedstatus)as approvedstatus,max(req.requestedquantity)as requestedquantity, max(req.materialid)as materialid,max(mat.materialdescription) as materialdescription, max(req.requestid)as requestid,req.requestforissueid,sum(issuedqty)as issuedquantity
 from wms.wms_materialrequest  req
 left join wms.wms_materialissue iss on req.requestforissueid=iss.requestforissueid  
 left join wms.wms_stock sk on sk.itemid=iss.itemid
  left outer join wms."MaterialMasterYGS" mat on mat.material=req.materialid
 where req.requestid=#requestid
  group by req.requestforissueid,iss.materialissueid</value>
  </data>
  <data name="getsecurityreceivedlist" xml:space="preserve">
    <value>select sl.pono,emp.name as receivedby,sl.asnno as asn,sl.invoiceno,sl.suppliername
from wms.wms_securityinward sl 
left outer join wms.employee emp on sl.receivedby = emp.employeeno</value>
  </data>
  <data name="getmaterialdetailsbyreserveid" xml:space="preserve">
    <value>select distinct max(res.reserveformaterialid) as reserveformaterialid, max(sk.availableqty)as availableqty,res.pono,max(res.materialid)as materialid,max(res.reserveid) as reserveid,
 max(pro.jobname)as jobname,max(res.reservedon)as reservedon,max(res.reservedqty)as reservedqty,max(emp."name")as name 
 from wms.wms_materialreserve res
inner join wms.employee emp on emp.employeeno=res.reservedby
inner join wms.wms_stock sk on sk.pono=res.pono 
left join wms.wms_polist op on op.pono=res.pono
left join wms.wms_pomaterials pomat on pomat.pono=op.pono
left join wms.wms_project pro on pro.pono=op.pono
where reserveid=#reserveid and sk.availableqty&gt;0
group by res.pono</value>
  </data>
  <data name="getnextreservetid" xml:space="preserve">
    <value>select reserveid from wms.wms_materialreserve order by reserveid desc limit 1</value>
  </data>
  <data name="GetreleasedmaterialList" xml:space="preserve">
    <value>select req.reserveid,max(req.reservedon)as reservedon,req.reservedby,po.projectname,emp."name" 
 from wms.wms_materialreserve req left join wms.openpolistview po on po.pono=req.pono 
left join wms.employee emp on req.reservedby=emp.employeeno 
group by req.reserveid,req.reservedby,po.projectname,emp."name" order by req.reserveid desc</value>
  </data>
  <data name="Getreleasedqty" xml:space="preserve">
    <value>select sum(req.reservedqty)as reservedqty, req.materialid,Max(mat.materialdescription) as materialdescription,req.reserveid 
from wms.wms_materialreserve  req
left outer join wms."MaterialMasterYGS" mat on mat.material=req.materialid
where req.reserveid=#reserveid and req.reservedqty&gt;0 
group by req.reserveid,req.materialid</value>
  </data>
  <data name="getreservedmaterialList" xml:space="preserve">
    <value>select  max('')as projectname,max(res.reserveupto)as reserveupto,res.reserveid,max(res.pono) as pono,max(res.reservedon) as reservedon,
max(iss.approvedstatus)as approvedstatus,max(res.projectcode)as projectcode,max(res.remarks)as remarks,max(emp.name)as requestedby,max(res.requestedon)as requestedon,
CASE
     WHEN max(res.reserveupto::date) &lt; current_date THEN
	 'Expired'
     WHEN max(res.requestedby) is NOT NULL THEN
	  'Requested'
	 ELSE 'Reserved'
  END as chkstatus
from wms.wms_materialreserve res 
left join wms.wms_stock sk on sk.materialid=res.materialid
left join wms.openpolistview op on op.pono=res.pono
left join wms.wms_materialissue iss on iss.reserveformaterialid=res.reserveformaterialid 
left outer join wms.employee emp on emp.employeeno = res.requestedby
where reservedby='#reservedby'
group by res.reserveid order by res.reserveid desc</value>
  </data>
  <data name="insertreservematerial" xml:space="preserve">
    <value>insert into wms.wms_materialreserve(reserveformaterialid,materialid,itemid,pono,reservedon,reservedby,reservedqty,reserveid,reserveupto,projectcode,remarks)
values(default,@materialid,@itemid,@pono,current_timestamp,@reservedby,@reservedqty,@reserveid,@reserveupto,@projectcode,@remarks)</value>
  </data>
  <data name="updateackstatusforreserved" xml:space="preserve">
    <value>update wms.wms_materialreserve set ackstatus=@ackstatus,ackremarks=@ackremarks where reserveid=@reserveid</value>
  </data>
  <data name="updateapproverstatusforrelease" xml:space="preserve">
    <value>insert into wms.wms_materialissue(materialissueid,pono,itemid,reserveformaterialid,itemissueddate,itemreceiverid,deleteflag,itemreturnable,approvedby,approvedon,issuedqty,approvedstatus)
 values(default,@pono,@itemid,@reserveformaterialid,@itemissueddate,@itemreceiverid,false,@itemreturnable,@approvedby,@approvedon,@issuedqty,@approvedstatus)</value>
  </data>
  <data name="updatestock" xml:space="preserve">
    <value>update wms.wms_stock set availableqty=#availableqty where itemid=#itemid</value>
  </data>
  <data name="getmatforgrnno" xml:space="preserve">
    <value>select  sec.inwmasterid,inw.confirmqty, sec.grnnumber,sec.pono,mtmaster.materialdescription,inw.materialid
 from wms.wms_securityinward sec 
 join wms.wms_storeinward inw on inw.inwmasterid=sec.inwmasterid
  join wms.wms_polist openpo on sec.pono = openpo.pono
 join wms."MaterialMasterYGS"  mtmaster on mtmaster.material= inw.materialid
where sec.grnnumber ='#grn'</value>
    <comment>get material details</comment>
  </data>
  <data name="getgatepassunitprice" xml:space="preserve">
    <value>sk left join wms."MaterialMasterYGS" ygs on ygs.material=sk.materialid</value>
  </data>
  <data name="updategatepassmaterialissue" xml:space="preserve">
    <value>insert into wms.wms_materialissue(materialissueid,pono,itemid,gatepassmaterialid,itemissueddate,itemreceiverid,deleteflag,itemreturnable,approvedby,approvedon,issuedqty,approvedstatus)
values(default,@pono,@itemid,@gatepassmaterialid,@itemissueddate,@itemreceiverid,false,@itemreturnable,@approvedby,@approvedon,@issuedqty,@approvedstatus)</value>
  </data>
  <data name="updatestockavailable" xml:space="preserve">
    <value>update wms.wms_stock set availableqty=#availableqty where itemid=#itemid</value>
  </data>
  <data name="getMateDescr" xml:space="preserve">
    <value>select Materialdescription from wms."MaterialMasterYGS"  where Material = '#materialid'</value>
  </data>
  <data name="insertqualitycheck" xml:space="preserve">
    <value>UPDATE  wms.wms_storeinward set  qualitypassedqty=@qualitypassedqty,qualityfailedqty = @qualityfailedqty,checkedby = @receivedby,checkedon=current_date,remarks=@remarks where inwardid =#inwardid</value>
  </data>
  <data name="getdataforqualitydetails" xml:space="preserve">
    <value>select stinw.inwardid,stinw.lineitemno,stinw.pono,stinw.inwmasterid,stinw.qualitycheckrequired,stinw.materialid as material,secinw.grnnumber,secinw.pono as securitypo,secinw.invoiceno,secinw.onhold,mat.materialdescription,stinw.receivedqty,stinw.receiveddate,stinw.returnqty,qc.qualitypassedqty,qc.qualityfailedqty,qc.remarks,qc.qcby as checkedby
  from wms.wms_storeinward stinw
  left outer join wms.wms_securityinward secinw on secinw.inwmasterid=stinw.inwmasterid
  left outer join wms."MaterialMasterYGS" mat on mat.material = stinw.materialid
  left outer join wms.wms_qualitycheck qc on qc.inwardid=stinw.inwardid
  where stinw.qualitycheckrequired is True and secinw.grnnumber = '#grnno'</value>
  </data>
  <data name="receiveforinvoice" xml:space="preserve">
    <value>INSERT INTO wms.wms_storeinward(inwmasterid,receiveddate,receivedby,receivedqty,materialid,deleteflag,qualitycheckrequired,qualitychecked,materialqty,remarks,pono,lineitemno)
VALUES(@inwmasterid,@receiveddate,@receivedby,@receivedqty,@materialid,@deleteflag,@qualitycheck,@qualitychecked,@materialqty,@receiveremarks,@pono,@lineitemno)returning inwardid</value>
  </data>
  <data name="getGatePassApprovalHistoryList" xml:space="preserve">
    <value>SELECT * FROM  wms.wms_gatepassapprovals where gatepassid ='#gatepassid' ORDER BY historyid DESC LIMIT 2</value>
  </data>
  <data name="insertpo" xml:space="preserve">
    <value>insert into wms.wms_polist(pono,suppliername,type) values (@pono,@suppliername,@type)</value>
  </data>
  <data name="getinwardidbygrn" xml:space="preserve">
    <value>select inwmasterid from wms.wms_securityinward where grnnumber='#grnno' limit 1</value>
  </data>
  <data name="insertreturndata" xml:space="preserve">
    <value>UPDATE  wms.wms_storeinward set  confirmqty=@confirmqty,returnqty = @returnqty,returnedby = @receivedby,returnedon=current_date,returnremarks=@returnremarks where inwardid =#inwardid</value>
  </data>
  <data name="receivequeryfornonpo" xml:space="preserve">
    <value>select sinw.invoiceno,inw.pono,inw.lineitemno,sinw.grnnumber,sinw.onhold,sinw.onholdremarks,sinw.unholdedby,sinw.receiveddate,inw.remarks as receiveremarks,inw.materialid as material,ms.materialdescription,
 inw.inwardid,inw.qualitychecked,inw.returnedby,inw.returnedon,inw.returnremarks,inw.receivedqty,inw.returnremarks,inw.materialqty,
 qc.qualitypassedqty,qc.qualityfailedqty,qc.qcby as checkedby,
 CASE
     WHEN inw.qualitycheckrequired != True and inw.returnedby is null THEN inw.receivedqty
	 WHEN inw.qualitycheckrequired = True and inw.returnedby is null THEN qc.qualitypassedqty
	 ELSE inw.confirmqty
  END as confirmqty,
CASE
     WHEN inw.returnedby is null THEN qc.qualityfailedqty
     ELSE  inw.returnqty
  END as returnqty,
   CASE
     WHEN inw.qualitycheckrequired is null THEN ms.qualitycheck
     ELSE inw.qualitycheckrequired
  END as qualitycheck
 from wms.wms_securityinward sinw
 left outer join wms.wms_storeinward inw on inw.inwmasterid=sinw.inwmasterid
 left outer join wms.wms_qualitycheck qc on qc.inwardid = inw.inwardid
 left outer join wms."MaterialMasterYGS" ms on ms.material = inw.materialid</value>
  </data>
  <data name="receivequeryforpo" xml:space="preserve">
    <value>select distinct openpo.projectname,inwa.invoiceno,inw.checkedby,inwa.grnnumber,inwa.pono,inw.qualitychecked,
openpo.material,openpo.materialqty,inw.receivedqty,inw.returnedby,inw.returnedon,inw.returnremarks,
openpo.materialdescription, openpo.quotationqty,inw.receivedqty,inw.returnqty,qc.qualitypassedqty,qc.qualityfailedqty,
CASE
     WHEN inw.returnedby is null THEN qc.qualitypassedqty
     ELSE  inw.confirmqty
  END as confirmqty,
  CASE
     WHEN inw.returnedby is null THEN qc.qualityfailedqty
     ELSE  inw.returnqty
  END as returnqty,
  CASE
     WHEN inw.qualitycheckrequired is null THEN ms.qualitycheck
     ELSE inw.qualitycheckrequired
  END as qualitycheck
from wms.wms_securityinward inwa  
left join wms.wms_storeinward inw on inw.inwmasterid=inwa.inwmasterid
inner join wms.openpolistview openpo on openpo.pono=inwa.pono
left outer join wms."MaterialMasterYGS" ms on ms.material = openpo.material
left outer join wms.wms_qualitycheck qc on qc.inwardid = inw.inwardid</value>
  </data>
  <data name="savequalityquery" xml:space="preserve">
    <value>INSERT INTO wms.wms_qualitycheck(inwardid,qualitypassedqty,qualityfailedqty,qcby,remarks,qcdate)
  VALUES(@inwardid,@qualitypassedqty,@qualityfailedqty,@receivedby,@remarks,current_date) returning qcid</value>
  </data>
  <data name="getimmediatemnger" xml:space="preserve">
    <value>select emp.name,emp.hodempno as approverid,emp1y.name as managername,
orgdept.departmenthead  as departmentheadid,emp1.name departmentheadname
 from wms.employee  emp
 left outer join wms.orgdepartments orgdept on orgdept.orgdepartmentid=emp.orgdepartmentid
 left outer join wms.employee emp1 on emp1.employeeno=orgdept.departmenthead
 left outer join wms.employee emp1y on emp1y.employeeno=emp.hodempno
 where emp.employeeno='#employeeno'</value>
  </data>
  <data name="getgatepassapproverdata" xml:space="preserve">
    <value>select * from wms.wms_gatepass gate 
left join wms.employee emp on emp.employeeno=gate.requestedby  where approverid='#approverid'</value>
  </data>
  <data name="insertgatepassapprovalhistory" xml:space="preserve">
    <value>insert into wms.wms_gatepassapprovals(historyid,gatepassid,approverid,approvername,approverstatus,"label",approvedon)values(default,@gatepassid,@approverid,@approvername,@approverstatus,@label,current_timestamp)</value>
  </data>
  <data name="updategatepasshistoryfornonreturn" xml:space="preserve">
    <value>insert into wms.wms_gatepassapprovals(historyid,gatepassid,fmapproverid,fmapprovername,fmapproverstatus,"label")
values(default,@gatepassid,@fmapproverid,@fmapprovername,'Pending',@label)</value>
  </data>
  <data name="updateApprovedstatusbyFMmanager" xml:space="preserve">
    <value>update wms.wms_gatepass set fmapprovedstatus='#fmapprovedstatus',fmapproverremarks=@fmapproverremarks,fmapprovedon=current_timestamp where gatepassid=@gatepassid</value>
  </data>
  <data name="updateApprovedstatusbymanager" xml:space="preserve">
    <value>update wms.wms_gatepass set approverstatus='#approverstatus',approverremarks=@approverremarks,approvedon=current_timestamp where gatepassid=@gatepassid</value>
  </data>
  <data name="getSafteyStockList" xml:space="preserve">
    <value>select mmy.material, mmy.materialdescription,sum(st.availableqty) as availableqty,mmy.safteystock as safteystock ,mmy.minorderqty as minorderqty
from wms."MaterialMasterYGS" mmy  join wms.wms_stock st on st.materialid =mmy.material where st.availableqty &lt; mmy.safteystock group by mmy.material</value>
  </data>
  <data name="getbinlist" xml:space="preserve">
    <value>select bin.binnumber,sk.binid,sk.materialid as material,sum(sk.availableqty)as availableqty,max(sk.itemlocation)as itemlocation
 from wms.wms_rd_bin bin left join wms.wms_stock sk  on bin.binid=sk.binid group by sk.binid,sk.materialid,bin.binnumber order by sk.binid asc</value>
  </data>
  <data name="getinternalstocktransferdata" xml:space="preserve">
    <value>select st.transferid,st.itemid,st.materialid,mat.materialdescription,st.previouslocation,st.previousqty,st.currentlocation,st.transferedqty,st.transferedon,emp.name as transferedby,st.remarks 
from wms.wms_stocktransfer st 
left outer join wms."MaterialMasterYGS" mat on mat.material = st.materialid
left outer join wms.employee emp on emp.employeeno = st.transferedby order by st.transferid desc</value>
  </data>
  <data name="stocktransferinternal" xml:space="preserve">
    <value>insert into wms.wms_stocktransfer (itemid,materialid,previouslocation,previousqty,currentlocation,transferedqty,transferedon,transferedby,remarks)
values (@itemid,@materialid,@previouslocation,@previousqty,@currentlocation,@transferedqty,@transferedon,@transferedby,@remarks)</value>
  </data>
  <data name="Stocktransferbygroup" xml:space="preserve">
    <value>select st.materialid,Max(mat.materialdescription) as materialdescription,SUM(st.transferedqty) transferedqty,st.transferedon from wms.wms_stocktransfer st
left outer join wms."MaterialMasterYGS" mat on st.materialid = mat.material
group by st.materialid,st.transferedon order by st.transferedon desc</value>
  </data>
  <data name="getinvtransfermaterialdetail" xml:space="preserve">
    <value>select inv.transferid, inv.materialid , Max(mat.materialdescription) as materialdescription, inv.sourcelocation ,inv.destinationlocation ,sum(inv.transferqty) as transferqty
from wms.wms_invtransfermaterial inv
left outer join wms."MaterialMasterYGS" mat on inv.materialid = mat.material
where inv.transferid = '#tid' 
group by inv.transferid, inv.materialid , inv.sourcelocation,inv.destinationlocation</value>
  </data>
  <data name="insertInvStocktransfer" xml:space="preserve">
    <value>insert into wms.wms_invstocktransfer (transferredby,transferredon,transfertype,sourceplant,destinationplant,remarks)
values (@transferredby,@transferredon,@transfertype,@sourceplant,@destinationplant,@remarks) returning transferid</value>
  </data>
  <data name="insertinvtransfermaterial" xml:space="preserve">
    <value>insert into wms.wms_invtransfermaterial (transferid,materialid,sourcelocation,sourceitemid,destinationlocation,destinationitemid,transferqty)
values (@transferid,@materialid,@sourcelocation,@sourceitemid,@destinationlocation,@destinationitemid,@transferqty)</value>
  </data>
  <data name="invstocktransfermainquery" xml:space="preserve">
    <value>select inv.transferid,emp.name as transferredby,inv.transferredon,inv.transfertype,inv.sourceplant,inv.destinationplant,inv.remarks  
from wms.wms_invstocktransfer inv 
left outer join wms.employee emp  on emp.employeeno = inv.transferredby
order by transferredon Desc</value>
  </data>
  <data name="getpendingreceiptslist" xml:space="preserve">
    <value>select sl.inwmasterid||'-'||sl.invoiceno as value,sl.inwmasterid as text,pono as pos,suppliername as supplier 
from wms.wms_securityinward sl 
where sl.grnnumber is null and sl.onhold is NOT True and (sl.holdgrstatus is NULL or sl.holdgrstatus =  'accepted')
order by sl.inwmasterid desc</value>
  </data>
  <data name="getgrnlistdata" xml:space="preserve">
    <value>select MAX(stinw.inwardid) as value,sinw.grnnumber as text,Max(sinw.suppliername) as supplier 
from wms.wms_storeinward stinw
left outer join wms.wms_securityinward sinw on stinw.inwmasterid = sinw.inwmasterid 
where (stinw.confirmqty is null or stinw.confirmqty = 0) and stinw.receivedqty &gt; 0  and sinw.grnnumber is not null and sinw.onhold is not True  group by stinw.inwmasterid,sinw.grnnumber</value>
  </data>
  <data name="getgrnlistdataforputaway" xml:space="preserve">
    <value>select stinw.inwardid as value,sinw.grnnumber as text,
sinw.suppliername as supplier
from wms.wms_storeinward stinw 
left outer join wms.wms_securityinward sinw on stinw.inwmasterid = sinw.inwmasterid 
where stinw.returnedby is not null and sinw.isdirecttransferred is NOT True and stinw.confirmqty &gt; 0
and stinw.inwardid not in (select distinct inwardid from wms.wms_stock where inwardid is not null order by inwardid desc)</value>
  </data>
  <data name="getnonreturnablegatepassdata" xml:space="preserve">
    <value>select Max(matis.gatepassmaterialid) gatepassmaterialid,Max(matis.itemid) itemid,Max(matis.itemissueddate) as itemissueddate,Max(ygs.materialdescription) as materialdescription,Max(emp.name) as name,
Max(matgt.gatepassid) as gatepassid,Max(matgt.materialid) as materialid,Max(matgt.materialcost) as materialcost,Max(matgt.quantity) as quantity,SUM(matis.issuedqty) issuedqty,
Max(gt.gatepasstype) gatepasstype,Max(gt.vendorname) as vendorname,Max(gt.requestedby) as requestedby,Max(gt.requestedon) as requestedon,Max(emp3.name) as mgapprover,Max(emp4.name) as fmapprover,
(select SUM(outwardqty) from wms.outwatdinward where gatepassmaterialid = matis.gatepassmaterialid group by gatepassmaterialid) as outwardedqty,
(select SUM(inwardqty) from wms.outwatdinward where gatepassmaterialid = matis.gatepassmaterialid group by gatepassmaterialid) as inwardedqty,
(select Max(outwarddate) from wms.outwatdinward where gatepassid = Max(matgt.gatepassid)  group by gatepassid) as outwarddate,
(select Max(securityinwarddate) from wms.outwatdinward where gatepassid = Max(matgt.gatepassid)  group by gatepassid) as securityinwarddate,
(select Max(approvedon) from wms.wms_gatepassapprovals where gatepassid = Max(matgt.gatepassid)  group by gatepassid) as approvedon
from wms.wms_materialissue matis
left outer join wms.wms_gatepassmaterial matgt on matgt.gatepassmaterialid = matis.gatepassmaterialid
left outer join wms.wms_gatepass gt on gt.gatepassid = matgt.gatepassid
left join wms.employee emp on emp.employeeno=gt.requestedby
left join wms.employee emp1 on emp1.employeeno=matgt.outwardedby
left join wms.employee emp2 on emp2.employeeno=matgt.inwardedby
left join wms.employee emp3 on emp3.employeeno=gt.approverid
left join wms.employee emp4 on emp4.employeeno=gt.fmapproverid
left join wms."MaterialMasterYGS" ygs on ygs.material=matgt.materialid
where matis.gatepassmaterialid  is not null and matgt.returneddate is null
group by matis.gatepassmaterialid
order by matis.gatepassmaterialid desc</value>
  </data>
  <data name="getstocktype" xml:space="preserve">
    <value>select stocktype from wms.stocklocation where locationid='#locationid' and location='#locationname' and storeid=#stid and rackid=#rkid and binid=#biid limit 1</value>
  </data>
  <data name="getuserroles" xml:space="preserve">
    <value>select distinct rl.roleid,rm.rolename as accessname,rl.subroleid  from wms.v_getAccessList rl
left outer join wms.rolemaster rm on rl.roleid = rm.roleid
where rl.employeeid = '#employeeid'</value>
  </data>
  <data name="Getreservelist" xml:space="preserve">
    <value>select * from wms.wms_materialreserve reser
inner join wms.employee emp on emp.employeeno=reser.reservedby
where reserveupto between current_date and current_date  + interval '3 day' and releasedon is null</value>
  </data>
  <data name="updatedon" xml:space="preserve">
    <value>update wms.wms_materialreserve set releasedon=current_timestamp where reserveformaterialid=@reserveformaterialid</value>
  </data>
  <data name="UpdateReturnqty" xml:space="preserve">
    <value>insert into wms.wms_returnmaterial(returnid,returnqty,createdby,createdon,remarks,materialid,matreturnid)values
  (default,@returnqty,@createdby,current_timestamp,@remarks,@materialid,@matreturnid)</value>
  </data>
  <data name="updatetostockreserveqty" xml:space="preserve">
    <value>update wms.wms_stock set availableqty=availableqty+@reservedqty where itemid=@itemid</value>
  </data>
  <data name="GetStockDetails" xml:space="preserve">
    <value>select polist.pono, pomat.materialid as modelno, pomat.materialdescription as description,proj.jobname as jobname,
 pomat.materialqty as qty, pomat.itemdeliverydate as date from wms.wms_polist polist 
 join wms.wms_pomaterials pomat on pomat.pono = polist.pono join wms.wms_project proj on proj.pono =polist .pono 
 where polist.pono ='#pono' and pomat.materialid ='#materialid'</value>
  </data>
  <data name="updatereturnmaterialToStock" xml:space="preserve">
    <value>update wms.wms_stock set availableqty=availableqty+@availableqty where itemid=@itemid</value>
  </data>
  <data name="updatereturnqtyByInvMngr" xml:space="preserve">
    <value>update wms.wms_materialreturn set confirmstatus='Accepted' where returnid='@returnid'</value>
  </data>
  <data name="getlistforconfirm" xml:space="preserve">
    <value>select * from wms.wms_returnmaterial returnmat
   where returnmat.returnid=#returnid </value>
  </data>
  <data name="GetreturnList" xml:space="preserve">
    <value>select matreturnid,materialid,createdby ,
Max(mat.materialdescription) as Materialdescription,Max(mat.stocktype) as stocktype,
  createdon, max(emp."name") as name, confirmstatus from wms.wms_returnmaterial reqtrasnfer 
  left join wms.employee emp on emp.employeeno=reqtrasnfer.createdby
  left join wms."MaterialMasterYGS" mat on reqtrasnfer.materialid=mat.material
  group by reqtrasnfer.returnid</value>
  </data>
  <data name="checkmatexists" xml:space="preserve">
    <value>select * from wms."MaterialMasterYGS" where material='#materialid'</value>
  </data>
  <data name="getPODetails" xml:space="preserve">
    <value>select sk.pono, polist.suppliername,prj.projectmanager from wms.wms_stock sk
left outer join wms.wms_polist polist on sk.pono = polist.pono
left outer join wms.wms_project prj on sk.pono = prj.pono 
where sk.availableqty &gt; 0 and prj.projectmanager = '#manager'
group by sk.pono, polist.suppliername,prj.projectmanager</value>
    <comment>Get PO Details</comment>
  </data>
  <data name="getitemiddata" xml:space="preserve">
    <value>select * from wms.wms_stock where materialid='#materialid' and availableqty &gt; 0</value>
  </data>
  <data name="getreturndata" xml:space="preserve">
    <value>select distinct max(retmat.matreturnid) as matreturnid,max(retmat.returnid ) as returnid, 
  max(retmat.materialid) as materialid,max(retmat.returnqty) as returnqty,max(retmat.createdby) as createdby,max(retmat.createdon) as createdon
  from wms.wms_returnmaterial retmat 
  where retmat.createdby='#createdby'
  group by retmat.matreturnid</value>
  </data>
  <data name="gettransferdata" xml:space="preserve">
    <value>select ts.transferid, ts.projectcode,ts.approvallevel,ts.finalapprovallevel,ts.fromprojectcode as projectcodefrom,ts.remarks as transferremarks,emp.name as transferedby,ts.createdon as transferredon,
(select emp.name as projectmanager from wms.wms_project prj 
 left outer join wms.employee emp on prj.projectmanager = emp.employeeno
 where prj.projectcode = ts.projectcode and prj.projectmanager is not null and prj.projectmanager &lt;&gt; '' limit 1) as projectmanagerto,
(select emp1.name as projectmanager from wms.wms_project prj1
 left outer join wms.employee emp1 on prj1.projectmanager = emp1.employeeno 
 where prj1.projectcode = ts.fromprojectcode and prj1.projectmanager is not null and prj1.projectmanager &lt;&gt; '' limit 1) as projectmanagerfrom,
CASE
     WHEN ts.approvallevel = ts.finalapprovallevel THEN 'Approved'
	 WHEN ts.approvallevel = 5 THEN 'Rejected'
	 ELSE 'Pending'
  END as status
from wms.wms_transfermaterial ts
left outer join wms.employee emp on emp.employeeno = ts.createdby
where ts.createdby='#createdby' order by ts.transferid desc</value>
  </data>
  <data name="updatetransferdata" xml:space="preserve">
    <value>insert into wms.wms_transfermaterial(transferqty,createdby,createdon,remarks,projectcode,materialid,approvallevel,finalapprovallevel,fromprojectcode) values
        (@transferqty,@createdby,current_timestamp,@remarks,@projectcode,@materialid,@approvallevel,@finalapprovallevel,@fromprojectcode) RETURNING transferid</value>
  </data>
  <data name="updatetostockbyinvmanger" xml:space="preserve">
    <value>insert into wms.wms_stock(itemid,materialid,itemlocation,availableqty,createddate,createdby,returnid,stcktype,storeid,rackid,binid)values(default,@materialid,@itemlocation,@availableqty,current_timestamp,@createdby,@returnid,@stocktype,@storeid,@rackid,@binid)</value>
  </data>
  <data name="getqualitycheckdropdown" xml:space="preserve">
    <value>select distinct grnnumber as value,inwmasterid as text,supplier,receiveddate::date from 
(select stinw.inwardid,stinw.inwmasterid,stinw.materialid as material,
 secinw.grnnumber,secinw.onhold,mat.materialdescription,stinw.receivedqty,
 stinw.receiveddate,stinw.returnqty,qc.qualitypassedqty,qc.qualityfailedqty,
 qc.remarks,qc.qcby as checkedby,
stinw.pono,secinw.suppliername as supplier
  from wms.wms_storeinward stinw
  left outer join wms.wms_securityinward secinw on secinw.inwmasterid=stinw.inwmasterid
  left outer join wms."MaterialMasterYGS" mat on mat.material = stinw.materialid
  left outer join wms.wms_qualitycheck qc on qc.inwardid=stinw.inwardid
  where stinw.qualitycheckrequired = True and stinw.receivedqty &gt; 0 and secinw.onhold is NOT True and secinw.grnnumber is NOT NULL and qc.qcby is null  order by stinw.inwardid DESC) as grn order by receiveddate::date desc</value>
  </data>
  <data name="getHoldGRdetail" xml:space="preserve">
    <value>select sinw.inwmasterid,sinw.invoiceno,inw.pono,sinw.onhold,sinw.onholdremarks,inw.lineitemno,
sinw.receiveddate,sinw.unholdedon,sinw.unholdremarks,emp1.name as unholdedby,
inw.materialid as material,ms.materialdescription,inw.inwardid,inw.checkedby,
inw.qualitychecked,inw.returnedby,inw.returnedon,inw.returnremarks,inw.receivedqty,
sinw.suppliername as vendorname,
inw.returnremarks,inw.materialqty,emp.name as receivedby from wms.wms_storeinward inw 
left outer join wms.wms_securityinward sinw on inw.inwmasterid=sinw.inwmasterid
left outer join wms."MaterialMasterYGS" ms on ms.material = inw.materialid
left outer join wms.employee emp on emp.employeeno = inw.receivedby 
left outer join wms.employee emp1 on emp1.employeeno = sinw.unholdedby 
where sinw.holdgrstatus = '#status'</value>
  </data>
  <data name="getHoldGRList" xml:space="preserve">
    <value>select sl.pono||'-'||sl.invoiceno as value,sl.pono||'-'||sl.invoiceno as text,(select suppliername from wms.wms_polist where pono = sl.pono limit 1) as supplier 
from wms.wms_securityinward sl 
where sl.onhold = True 
order by sl.inwmasterid desc</value>
  </data>
  <data name="updatereceiptunhold" xml:space="preserve">
    <value>update wms.wms_storeinward set receiveddate=@receiveddate,receivedby=@receivedby,
receivedqty=@receivedqty,qualitycheckrequired=@qualitycheck,qualitychecked=@qualitychecked,remarks=@receiveremarks
where inwardid = '#inwardid'
where inwardid = '#inwardid'</value>
  </data>
  <data name="getprojectlist" xml:space="preserve">
    <value>select projectcode as value, projectcode as text,Max(projectmanager) as projectmanager
from wms.wms_project  where projectmanager = '#manager' group by projectcode</value>
  </data>
  <data name="getitemsfornotifypage" xml:space="preserve">
    <value>select inwa.inwardid,bin.binnumber, rack.racknumber, loc.locatorname,mat.rackid,mat.binid,
 mat.storeid,mat.stocktype,stocks.itemlocation,stocks.availableqty,stocks.itemid,inw.grnnumber,inw.pono,inw.invoiceno,inw.receiveddate,
 inw.isdirecttransferred,inw.projectcode,emp.name as mrnby,inw.mrnon,inw.mrnremarks,
 inw.notifyremarks,inw.notifiedby,inw.notifiedtofinance,inw.notifiedon,inw.putawayfilename,
 inwa.materialqty,inwa.materialid as material,mat.materialdescription,inwa.receivedqty,inwa.confirmqty,inwa.returnqty 
 from wms.wms_securityinward inw
left join wms.wms_storeinward inwa on inw.inwmasterid=inwa.inwmasterid
left join wms.wms_stock stocks on  stocks.inwardid=inwa.inwardid
 left join wms."MaterialMasterYGS" mat on inwa.materialid=mat.material
 left join wms.wms_rd_locator loc on loc.locatorid=mat.storeid
 left join wms.wms_rd_rack rack on rack.rackid=mat.rackid
 left join wms.wms_rd_bin bin on bin.binid=mat.binid
 left outer join wms.employee emp on emp.employeeno=inw.mrnby
 where inw.grnnumber='#grnnumber'</value>
  </data>
  <data name="grnlistfornotify" xml:space="preserve">
    <value>select stk.inwmasterid,sinw.grnnumber,sinw.pono,sinw.invoiceno,Max(sinw.suppliername) as vendorname,
Max(sinw.notifyremarks) as notifyremarks,Max(sinw.notifiedby) as notifiedby,sinw.notifiedtofinance,Max(sinw.notifiedon) as notifiedon,Max(sinw.putawayfilename) as putawayfilename
from wms.wms_stock stk
left outer join wms.wms_securityinward sinw on stk.inwmasterid = sinw.inwmasterid 
where stk.inwmasterid is not NULL and sinw.notifiedtofinance is NOT True  group by stk.inwmasterid,sinw.grnnumber,sinw.pono,sinw.invoiceno,sinw.notifiedtofinance</value>
  </data>
  <data name="validategrnlistfornotify" xml:space="preserve">
    <value>select stinw.inwmasterid as value,stinw.inwardid as text,stk.itemlocation as supplier from wms.wms_storeinward stinw 
left outer join wms.wms_stock stk on stk.inwardid = stinw.inwardid
where stinw.confirmqty &gt; 0 and stk.itemlocation is NULL and stinw.inwmasterid = '#inwmasterid'</value>
  </data>
  <data name="getmaterialfortransfer" xml:space="preserve">
    <value>select gtm.materialid as value,Max(mat.materialdescription) as text from wms.wms_materialissue mi
left outer join wms.wms_materialrequest gtm on gtm.requestforissueid = mi.requestforissueid
left outer join wms."MaterialMasterYGS" mat on mat.material = gtm.materialid
where mi.requestforissueid is not null and gtm.requesterid = '#requestor'
group by gtm.materialid</value>
  </data>
  <data name="getnotifiedgrnlist" xml:space="preserve">
    <value>select stk.inwmasterid,sinw.grnnumber,sinw.pono,sinw.invoiceno,Max(sinw.suppliername) as vendorname,
Max(sinw.notifyremarks) as notifyremarks,Max(emp.name) as notifiedby,sinw.notifiedtofinance,Max(sinw.notifiedon) as notifiedon,Max(sinw.putawayfilename) as putawayfilename
from wms.wms_stock stk
left outer join wms.wms_securityinward sinw on stk.inwmasterid = sinw.inwmasterid 
left outer join wms.employee emp on emp.employeeno=sinw.notifiedby
where stk.inwmasterid is not NULL and sinw.notifiedtofinance is True  group by stk.inwmasterid,sinw.grnnumber,sinw.pono,sinw.invoiceno,sinw.notifiedtofinance</value>
  </data>
  <data name="inserttransfermaterials" xml:space="preserve">
    <value>insert into wms.wms_transfermaterialdetail(transferid,materialid,transferqty)values
        (@transferid,@materialid,@transferredqty)</value>
  </data>
  <data name="gettransferiddetail" xml:space="preserve">
    <value>select tsd.transferid,tsd.materialid,tsd.transferqty as transferredqty,mat.materialdescription
from wms.wms_transfermaterialdetail tsd
left outer join wms."MaterialMasterYGS" mat on mat.material = tsd.materialid
where tsd.transferid = '#tid'</value>
  </data>
  <data name="getmatreturndetails" xml:space="preserve">
    <value>select sk.materialid,sk.itemlocation,sk.itemid, sk.returnid,sk.availableqty,mat.storeid as defaultstore,mat.rackid as defaultrack,mat.binid as defaultbin, * from wms.wms_returnmaterial rm
left outer join wms.wms_stock sk on rm.returnid = sk.returnid
left outer join wms."MaterialMasterYGS" mat on mat.material = rm.materialid
where rm.matreturnid=@matreid</value>
    <comment>Get material return requested details</comment>
  </data>
  <data name="getnxtreturnid" xml:space="preserve">
    <value>select matreturnid from wms.wms_returnmaterial order by matreturnid desc limit 1</value>
  </data>
  <data name="getqcdropdownbydate" xml:space="preserve">
    <value>select distinct grnnumber as value,inwmasterid as text,supplier,receiveddate::date from 
(select stinw.inwardid,stinw.inwmasterid,stinw.materialid as material,
 secinw.grnnumber,secinw.onhold,mat.materialdescription,stinw.receivedqty,
 stinw.receiveddate,stinw.returnqty,qc.qualitypassedqty,qc.qualityfailedqty,
 qc.remarks,qc.qcby as checkedby,
stinw.pono, secinw.suppliername as supplier
  from wms.wms_storeinward stinw
  left outer join wms.wms_securityinward secinw on secinw.inwmasterid=stinw.inwmasterid
  left outer join wms."MaterialMasterYGS" mat on mat.material = stinw.materialid
  left outer join wms.wms_qualitycheck qc on qc.inwardid=stinw.inwardid
  where stinw.qualitycheckrequired = True and stinw.receivedqty &gt; 0 and secinw.onhold is NOT True and secinw.grnnumber is NOT NULL and qc.qcby is null 
  and stinw.receiveddate &gt;= '#fromdt' and stinw.receiveddate &lt;= '#todate'
  order by stinw.inwardid DESC) as grn order by receiveddate::date desc</value>
  </data>
  <data name="deletetestcurd" xml:space="preserve">
    <value>delete from wms.testcrud where id = #id</value>
  </data>
  <data name="posttestcrud" xml:space="preserve">
    <value>insert into wms.testcrud (name,ismanager) values (@name, @ismanager)</value>
  </data>
  <data name="puttestcurd" xml:space="preserve">
    <value>update wms.testcrud set name = @name,ismanager= @ismanager where id = #id</value>
  </data>
  <data name="testcrudget" xml:space="preserve">
    <value>select id,name,ismanager from wms.testcrud</value>
  </data>
  <data name="getdepartmentmasterdata" xml:space="preserve">
    <value>select orgdepartmentid as value, orgdepartment as text from wms.orgdepartments
where boolinuse = True</value>
  </data>
  <data name="getinvoiceexists" xml:space="preserve">
    <value>select count(*) from wms.wms_securityinward  where pono ='#pono'  and invoiceno ='#invno'</value>
  </data>
  <data name="getmaxnonpo" xml:space="preserve">
    <value>select Max(pono) as POno  from wms.wms_polist where pono like 'NP%'</value>
  </data>
  <data name="isgrnexistsbygrn" xml:space="preserve">
    <value>select grnnumber,onhold,unholdedby,receiveddate from wms.wms_securityinward where grnnumber = '#grnno'</value>
  </data>
  <data name="isgrnexistsquerybyinvoce" xml:space="preserve">
    <value>select inwmasterid,grnnumber,onhold,unholdedby from wms.wms_securityinward where pono = '#pono' and invoiceno = '#invno'</value>
  </data>
  <data name="GetdetailsByrequestidWithoutPO" xml:space="preserve">
    <value>select (select sum(issuedqty) from wms.wms_materialissue  where requestforissueid =req.requestforissueid  ) as issuedqty,max(iss.approvedstatus) as approvedstatus,max(pro.projectname)as projectname,max(req.requestforissueid)as requestforissueid,max(emp."name")as name,req.requesteddate,sk.materialid,
req.requestedquantity,(select sum(availableqty) from wms.wms_stock ws where materialid =sk.materialid ) as availableqty,(select sum(reservedqty) from wms.wms_materialreserve wm where wm.materialid =sk.materialid ) as reservedqty,req.requestid 
from wms.wms_stock sk 
       inner join wms.wms_materialrequest req on req.materialid=sk.materialid
      left join wms.wms_materialissue iss  on iss.requestforissueid=req.requestforissueid
      inner join wms.employee emp on emp.employeeno=req.requesterid
      left join wms.wms_project pro on pro.pono=sk.pono
 where requestid=#requestid and req.deleteflag=false  
 group by  req.requestforissueid,sk.materialid</value>
  </data>
  <data name="getnotifiedgrbydate" xml:space="preserve">
    <value>select stk.inwmasterid,sinw.grnnumber,sinw.pono,sinw.invoiceno,Max(sinw.suppliername) as vendorname,
Max(sinw.notifyremarks) as notifyremarks,Max(emp.name) as notifiedby,sinw.notifiedtofinance,Max(sinw.notifiedon) as notifiedon,Max(sinw.putawayfilename) as putawayfilename
from wms.wms_stock stk
left outer join wms.wms_securityinward sinw on stk.inwmasterid = sinw.inwmasterid 
left outer join wms.employee emp on emp.employeeno=sinw.notifiedby
where stk.inwmasterid is not NULL and sinw.notifiedtofinance is True
and sinw.notifiedon :: date &gt;= '#fromdate' and sinw.notifiedon :: date &lt;= '#todate'
group by stk.inwmasterid,sinw.grnnumber,sinw.pono,sinw.invoiceno,sinw.notifiedtofinance</value>
  </data>
  <data name="directtransfermainquery" xml:space="preserve">
    <value>select ts.inwmasterid, ts.projectcode,ts.mrnremarks ,ts.grnnumber,emp.name as mrnby,ts.mrnon,
prj.projectmanager
from wms.wms_securityinward ts
left outer join wms.employee emp on emp.employeeno = ts.mrnby
left outer join wms.wms_project prj on prj.pono = ts.pono
where ts.mrnby is not null and prj.projectmanager = '#empno'</value>
  </data>
  <data name="directtransfertr" xml:space="preserve">
    <value>select tsd.inwmasterid,tsd.materialid,tsd.confirmqty,mat.materialdescription
from wms.wms_storeinward tsd
left outer join wms."MaterialMasterYGS" mat on mat.material = tsd.materialid
where tsd.inwmasterid = '#inw'</value>
  </data>
  <data name="getitemlocationListBysIssueId" xml:space="preserve">
    <value>select  sum(sk.availableqty)as availableqty,(select sum(issuedqty) from wms.wms_materialissue wm where itemid =sk.itemid ) as issuedqty,sk.pono,sk.materialid,sk.itemid,sk.itemlocation,ygs.materialdescription,ygs.material,createddate::DATE
from wms.wms_stock sk 
inner join wms."MaterialMasterYGS" ygs on ygs.material=sk.materialid 
left join wms.wms_materialissue iss on iss.itemid =sk.itemid 
where requestforissueid='#requestforissueid' and
sk.deleteflag=false
group by sk.itemlocation,ygs.materialdescription,ygs.material,createddate::DATE,sk.itemid</value>
  </data>
  <data name="insertSecurityPrintHistory" xml:space="preserve">
    <value>insert into wms.wms_reprinthistory(reprinthistoryid,inwmasterid, reprintedon,reprintedby,reprintcount,barcodeid,noofprint )values(default,@inwmasterid,current_date,@reprintedby,@reprintcount,@barcodeid, @noofprint)returning reprinthistoryid</value>
  </data>
  <data name="getMaterialTransferDetails" xml:space="preserve">
    <value>select ts.transferid, ts.projectcode,ts.remarks as transferremarks,emp.name as transferedby,ts.createdon as transferredon
from wms.wms_transfermaterial ts
left outer join wms.employee emp on emp.employeeno = ts.createdby</value>
  </data>
  <data name="getItemlocationListByGatepassmaterialid" xml:space="preserve">
    <value>select  sum(sk.availableqty)as availableqty,(select sum(issuedqty) from wms.wms_materialissue wm where itemid =sk.itemid and gatepassmaterialid = '#gatepassmaterialid') as issuedqty,sk.pono,sk.materialid,sk.itemid,sk.itemlocation,ygs.materialdescription,ygs.material,createddate::DATE
from wms.wms_stock sk 
inner join wms."MaterialMasterYGS" ygs on ygs.material=sk.materialid 
left join wms.wms_materialissue iss on iss.itemid =sk.itemid 
where gatepassmaterialid ='#gatepassmaterialid' and
sk.deleteflag=false
group by sk.itemlocation,ygs.materialdescription,ygs.material,createddate::DATE,sk.itemid</value>
  </data>
  <data name="getMaterialRequestDashboardDetails" xml:space="preserve">
    <value>select mr.requestid,mr.requesteddate,mr.ackstatus,emp.name as requestedby,mr.ackremarks,mr.remarks from wms.materialrequest mr
left outer join  wms.employee emp on emp.employeeno = mr.requesterid</value>
  </data>
  <data name="getMaterialReserveDashboardDetails" xml:space="preserve">
    <value>select mrs.reserveid,mrs.reservedon,mrs.ackstatus,emp.name as reservedby,mrs.remarks from wms.materialreserve mrs
left outer join  wms.employee emp on emp.employeeno = mrs.requestedby</value>
  </data>
  <data name="getMaterialReturnDashboardDetails" xml:space="preserve">
    <value>select mrt.returnid,mrt.confirmstatus,emp.name as createdby,mrt.createdon from wms.wms_materialreturn mrt
left outer join  wms.employee emp on emp.employeeno = mrt.createdby</value>
  </data>
  <data name="inwardinsertquery" xml:space="preserve">
    <value>insert into wms.outwatdinward (gatepassid,gatepassmaterialid,inwarddate,inwardby,inwardremarks,inwardqty)
values (@gatepassid,@gatepassmaterialid,current_timestamp,@movedby,@remarks,@inwardqty)</value>
  </data>
  <data name="outwardinsertquery" xml:space="preserve">
    <value>insert into wms.outwatdinward (gatepassid,gatepassmaterialid,outwarddate,outwardby,outwardremarks,outwardqty)
values (@gatepassid,@gatepassmaterialid,@outwarddatestring,@movedby,@remarks,@outwardqty)</value>
  </data>
  <data name="outinreportquery" xml:space="preserve">
    <value>select outin.gatepassid,outin.gatepassmaterialid,gtm.materialid,mat.materialdescription,outin.outwarddate,emp1.name as outwardby,
outin.outwardremarks,outin.outwardqty,outin.inwarddate,emp3.name as inwardby,outin.inwardremarks,outin.inwardqty,
outin.securityinwarddate,emp2.name as securityinwardby,outin.securityinwardremarks,
(select SUM(issuedqty) from wms.wms_materialissue where gatepassmaterialid = outin.gatepassmaterialid group by gatepassmaterialid) as issuedqty
from wms.outwatdinward outin 
left outer join wms.wms_gatepassmaterial gtm on gtm.gatepassmaterialid = outin.gatepassmaterialid
left outer join wms."MaterialMasterYGS" mat on gtm.materialid = mat.material
left join wms.employee emp1 on emp1.employeeno=outin.outwardby
left join wms.employee emp2 on emp2.employeeno=outin.securityinwardby
left join wms.employee emp3 on emp3.employeeno=outin.inwardby
order by outin.id</value>
  </data>
  <data name="inserttransferapproval" xml:space="preserve">
    <value>insert into wms.wms_materialtransferapproval(transferid,approverid,approvername,approveremail,approvalLevel) values
        (@transferid,@approverid,@approvername,@approveremail,@approvallevel)</value>
  </data>
  <data name="getapproverdatabyid" xml:space="preserve">
    <value>select approverid,approvername,approvaldate as approvedon,remarks,
CASE
     WHEN isapproved is True THEN 'Approved'
	 WHEN isapproved is False THEN 'Rejected'
	 ELSE 'Pending'
  END as status
from wms.wms_materialtransferapproval 
where transferid = '#transferid'</value>
  </data>
  <data name="getprojectmanager" xml:space="preserve">
    <value>select emp.name as projectmanager from wms.wms_project prj 
 left outer join wms.employee emp on prj.projectmanager = emp.employeeno
 where prj.projectcode = '#pcode'  and prj.projectmanager is not null and prj.projectmanager &lt;&gt; '' limit 1</value>
  </data>
  <data name="gettransferdataforapproval" xml:space="preserve">
    <value>select app.transferid,app.approvallevel as applevel,app.remarks as approvalremarks,app.isapproved,ts.projectcode,ts.approvallevel,
ts.finalapprovallevel,ts.fromprojectcode as projectcodefrom,
ts.remarks as transferremarks,emp.email as requesteremail,
emp.name as transferedby,ts.createdon as transferredon,
(select emp.name as projectmanager from wms.wms_project prj 
 left outer join wms.employee emp on prj.projectmanager = emp.employeeno
 where prj.projectcode = ts.projectcode and prj.projectmanager is not null and prj.projectmanager &lt;&gt; '' limit 1) as projectmanagerto,
(select emp1.name as projectmanager from wms.wms_project prj1
 left outer join wms.employee emp1 on prj1.projectmanager = emp1.employeeno 
 where prj1.projectcode = ts.fromprojectcode and prj1.projectmanager is not null and prj1.projectmanager &lt;&gt; '' limit 1) as projectmanagerfrom,
 CASE
     WHEN app.isapproved is True THEN 'Approved'
	 WHEN app.isapproved is False THEN 'Rejected'
	 ELSE 'Pending'
  END as status
from wms.wms_materialtransferapproval app
left outer join wms.wms_transfermaterial ts on ts.transferid = app.transferid
left outer join wms.employee emp on emp.employeeno = ts.createdby
where (app.approvallevel = ts.approvallevel and app.isapproved is null and app.approverid = '#approver') 
or (app.isapproved is not null and app.approverid = '#approver')</value>
  </data>
  <data name="getmaterialsbyprojectcode" xml:space="preserve">
    <value>select gtm.materialid as value,Max(mat.materialdescription) as text from wms.wms_materialissue mi
left outer join wms.wms_materialrequest gtm on gtm.requestforissueid = mi.requestforissueid
left outer join wms."MaterialMasterYGS" mat on mat.material = gtm.materialid
left outer join wms.wms_project prj on prj.pono = mi.pono
where mi.requestforissueid is not null and prj.projectcode = '#projectcode'
group by gtm.materialid</value>
  </data>
  <data name="getbarcodereprintdata" xml:space="preserve">
    <value>select * from wms.wms_barcode bar  join wms.wms_reprinthistory wr on wr.barcodeid =bar.barcodeid where bar.barcode ='#barcode'</value>
  </data>
  <data name="getprintdetailsforinvoice" xml:space="preserve">
    <value>select print  from wms.wms_securityinward  where pono ='#pono'  and invoiceno ='#invno'</value>
    <comment>To view whether the Invoice and PO QRcode is already printed</comment>
  </data>
  <data name="updatereprintdata" xml:space="preserve">
    <value>update wms.wms_reprinthistory  set reprintedon =current_date, reprintedby ='#reprintedby', reprintcount =#reprintcount where barcodeid ='#barcodeid'</value>
    <comment>Update reprint count in reprint history table</comment>
  </data>
  <data name="updateSecurityinwardprint" xml:space="preserve">
    <value>update wms.wms_securityinward set print=#print,  printedon =current_date, printedby ='#printedby', where pono ='#pono'  and invoiceno ='#invno'</value>
    <comment>Update print data in security inward</comment>
  </data>
  <data name="updatestoreinwprint" xml:space="preserve">
    <value>update wms.wms_storeinward set isprint=#print, printedby ='#printedby',noofprint=#noofprint, printedon =current_date where inwmasterid=#inwmasterid  and materialid='#materialid'</value>
  </data>
  <data name="insertprintmaterial" xml:space="preserve">
    <value>insert into wms.wms_printstatusmaterial(id,inwmasterid, printedon,printedby,printcount,noofprint,barcodeid,isprint,materialid )values(default,@inwmasterid,current_date,@printedby,@printcount,@noofprint,@barcodeid, @isprint,@materialid)returning id</value>
  </data>
  <data name="getmaterialstoreserve" xml:space="preserve">
    <value>select max(sk.pono) as pono ,sk.materialid as material,Max(prj.projectmanager) as projectmanager,
(select sum(ws.availableqty) from wms.wms_stock ws where ws.materialid =sk.materialid) as availableqty,
(select sum(ws1.availableqty) from wms.wms_stock ws1 where ws1.materialid =sk.materialid and ws1.stcktype = 'Plant Stock') as plantstockavailableqty,
max(mtmtr.unitprice) as materialcost,max(mtmtr.materialdescription) as materialdescription 
from wms.wms_stock  sk 
left outer join wms."MaterialMasterYGS" mtmtr on mtmtr.material = sk.materialid
left outer join wms.wms_project prj on prj.pono = sk.pono 
where sk.availableqty &gt; 0  group by sk.materialid</value>
  </data>
  <data name="getAllprojectlist" xml:space="preserve">
    <value>select projectcode as value, projectcode as text,Max(projectmanager) as projectmanager
from wms.wms_project  where projectmanager is not null group by projectcode</value>
  </data>
  <data name="getitemlocationListBysIssueId_v1" xml:space="preserve">
    <value>select iss.issuedqty,sk.pono,sk.materialid,sk.itemid,sk.itemlocation,
(select sum(sk1.availableqty) from wms.wms_stock sk1 where sk1.materialid = sk.materialid and sk1.itemlocation = sk.itemlocation) as availableqty
,sk.createddate::DATE,
ygs.materialdescription
from wms.wms_materialissue iss 
left outer join wms.wms_stock sk on iss.itemid =sk.itemid
left join wms."MaterialMasterYGS" ygs on ygs.material=sk.materialid 
where iss.requestmaterialid = '#requestforissueid'</value>
  </data>
  <data name="getmaterialissuelist" xml:space="preserve">
    <value>select req.requestid,req.requesteddate,emp.name,req.issuedby,req.issuedon,
	CASE WHEN req.issuedby IS Not NULL THEN 'Issued' ELSE 'Pending' END AS requeststatus
	from wms.materialrequest req
	left outer join wms.employee emp on req.requesterid = emp.employeeno</value>
  </data>
  <data name="getmaterialrequestdata" xml:space="preserve">
    <value>select dt.id,dt.requestid,dt.materialid,dt.requestedquantity,dt.returnqty,mat.materialdescription,
(select sum(issuedqty) from wms.wms_materialissue where requestmaterialid = dt.id) as issuedquantity
from wms.materialrequestdetails dt 
left outer join wms."MaterialMasterYGS" mat on dt.materialid = mat.material
where requestid = '#requestid'</value>
  </data>
  <data name="getmaterialrequests" xml:space="preserve">
    <value>select req.requestid,req.ackstatus,req.requesteddate,req.ackremarks,req.reserveid,req.projectcode,req.remarks,
  CASE WHEN req.ackstatus IS NULL THEN false ELSE true END AS status,
  CASE WHEN req.issuedby IS NULL THEN 'Pending' ELSE 'Approved' END AS approvedstatus
  from wms.materialrequest req where req.requesterid = '#reqid' order by req.requestid desc</value>
  </data>
  <data name="getmaterialreservedata" xml:space="preserve">
    <value>select rd.reserveid,rd.materialid,sum(rd.reservequantity) reservedqty,Max(mat.materialdescription) as materialdescription
from wms.materialreservedetails rd
left outer join wms."MaterialMasterYGS" mat on mat.material=rd.materialid where rd.reserveid = '#reserveid' group by rd.reserveid,rd.materialid</value>
  </data>
  <data name="getmaterialreserves" xml:space="preserve">
    <value>select rsv.reserveid,rsv.reserveupto,rsv.pono,rsv.reservedon,rsv.projectcode,rsv.remarks,
emp.name as requestedby,rsv.requestedon,
CASE
     WHEN rsv.reserveupto::date &lt; current_date THEN
	 'Expired'
     WHEN rsv.requestedby is NOT NULL THEN
	  'Requested'
	 ELSE 'Reserved'
  END as chkstatus
from wms.materialreserve rsv 
left outer join wms.employee emp on emp.employeeno = rsv.requestedby
where rsv.reservedby='#reservedby' order by rsv.reserveid desc</value>
  </data>
  <data name="getmaterialreturndetailquery" xml:space="preserve">
    <value>select matd.returnid,matd.materialid,mat.materialdescription,matd.returnqty,matd.remarks 
   from wms.wms_materialreturndetails matd
   left outer join wms."MaterialMasterYGS" mat on mat.material = matd.materialid
   where returnid = '#returnid'</value>
  </data>
  <data name="getmaterialreturnquery" xml:space="preserve">
    <value>select returnid,createdby,createdon,confirmstatus from wms.wms_materialreturn
  where createdby='#createdby' order by returnid desc</value>
  </data>
  <data name="getrequestdetailswithoutpo" xml:space="preserve">
    <value>select req.id as requestmaterialid,req.requestedquantity,req.materialid,mat.materialdescription,
 (select sum(issuedqty) from wms.wms_materialissue  where requestmaterialid = req.id) as issuedqty,
 (select sum(availableqty) from wms.wms_stock ws where materialid =req.materialid ) as availableqty,
 (select sum(reservequantity) from wms.materialreservedetails wm where wm.materialid =req.materialid ) as reservedqty,
  rq.projectcode as projectname,emp.name as name,rq.requesteddate,rq.requestid,rq.pono
 from  wms.materialrequestdetails req
 left outer join wms.materialrequest rq on rq.requestid=req.requestid
 left outer join wms.employee emp on emp.employeeno=rq.requesterid
 left outer join wms."MaterialMasterYGS" mat on mat.material=req.materialid
 where req.requestid='#requestid'</value>
  </data>
  <data name="getreservedatabyid" xml:space="preserve">
    <value>select sum(rsv.reservequantity) as reservedqty,rsv.reserveid,rsv.materialid,Max(rd.projectcode) as projectcode,Max(rd.pono) as pono from wms.materialreservedetails rsv
left outer join wms.materialreserve rd on rsv.reserveid = rd.reserveid
where rsv.reserveid = '#reserveid' group by rsv.reserveid,rsv.materialid</value>
  </data>
  <data name="insertmaterialrequest" xml:space="preserve">
    <value>INSERT INTO wms.materialrequest(approveremailid,approverid,pono,requesterid,requesteddate,deleteflag,projectcode,remarks)VALUES(@approveremailid,@approverid,@pono,@requesterid,current_date,false,@projectcode,@remarks) returning requestid</value>
  </data>
  <data name="insertmaterialrequestdetails" xml:space="preserve">
    <value>INSERT INTO wms.materialrequestdetails(id,requestid,materialid,requestedquantity)
VALUES(@id,@requestid,@materialid,@requestedquantity)</value>
  </data>
  <data name="insertmaterialreserve" xml:space="preserve">
    <value>insert into wms.materialreserve(pono,reservedon,reservedby,reserveupto,projectcode,remarks)
values(@pono,current_timestamp,@reservedby,@reserveupto,@projectcode,@remarks) returning reserveid</value>
  </data>
  <data name="insertmaterialreservedetails" xml:space="preserve">
    <value>insert into wms.materialreservedetails(id,reserveid,materialid,itemid,reservequantity)
values(@id,@reserveid,@materialid,@itemid,@reservedqty)</value>
  </data>
  <data name="insertmaterialreturndetails" xml:space="preserve">
    <value>insert into wms.wms_materialreturndetails (id,returnid,materialid,returnqty,remarks)
values (@id,@returnid,@materialid,@returnqty,@remarks)</value>
  </data>
  <data name="insertmaterialreturnquery" xml:space="preserve">
    <value>insert into wms.wms_materialreturn (createdby,createdon)
values (@createdby,current_date) returning returnid</value>
  </data>
  <data name="getitemlocationforissue" xml:space="preserve">
    <value>select sum(sk.availableqty)as availableqty,Max(sk.materialid) as materialid,sk.itemlocation,Max(ygs.materialdescription) as materialdescription,sk.createddate::DATE
from wms.wms_stock sk 
left outer join wms."MaterialMasterYGS" ygs on ygs.material=sk.materialid 
where sk.materialid='#materialid'
and sk.availableqty&gt;0 
group by sk.itemlocation,sk.createddate::DATE order by sk.createddate::DATE Desc</value>
  </data>
  <data name="GetreturnList_v1" xml:space="preserve">
    <value>select rtn.returnid,emp.name as createdby,rtn.createdon,rtn.confirmstatus,
  case 
   WHEN 
   (select count(distinct dtl.id) from wms.wms_materialreturndetails dtl where dtl.returnid = rtn.returnid) = (select count(distinct stk.returnid) as returned  from wms.wms_stock stk where stk.returnid in (
	  select distinct dtl.id from wms.wms_materialreturndetails dtl where dtl.returnid = rtn.returnid
  ))
   THEN 'Accepted' ELSE 'Pending' End as putawaystatus
  from wms.wms_materialreturn rtn
  left join wms.employee emp on emp.employeeno=rtn.createdby order by rtn.returnid desc</value>
  </data>
  <data name="getmaterialreturndetails" xml:space="preserve">
    <value>select  rnd.id,rnd.returnid,rnd.materialid,rnd.returnqty,mat.materialdescription,mat.stocktype,
mat.storeid as defaultstore,mat.rackid as defaultrack,mat.binid as defaultbin,stk.itemlocation,stk.availableqty
from wms.wms_materialreturndetails rnd
left outer join wms."MaterialMasterYGS" mat on mat.material = rnd.materialid
left outer join wms.wms_stock stk  on stk.returnid = rnd.id
where rnd.returnid='#returnid'</value>
  </data>
  <data name="getrequestiddetail" xml:space="preserve">
    <value>select mr.requestid,mr.requesteddate,mr.ackstatus,emp.name as requestedby,mr.ackremarks,mr.remarks,mqd.materialid,mqd.requestedquantity ,mqd.returnqty,ygs.materialdescription,
(select sum(issuedqty) from wms.wms_materialissue where requestmaterialid = mqd.id) as issuedquantity
from wms.materialrequest mr
left outer join  wms.employee emp on emp.employeeno = mr.requesterid 
left outer join  wms.materialrequestdetails mqd on mqd.requestid =mr .requestid 
left outer join  wms."MaterialMasterYGS" ygs on ygs.material = mqd.materialid 
where  mqd.requestid='#rid'</value>
  </data>
  <data name="getreserveiddetail" xml:space="preserve">
    <value>select ms.reserveid,ms.materialid,ygs.materialdescription,ms.reservequantity from wms.materialreservedetails ms
left outer join  wms."MaterialMasterYGS" ygs on ygs.material = ms.materialid
left outer join wms.materialreserve mrs on mrs.reserveid = ms.reserveid 
where ms.reserveid ='#rsid'</value>
  </data>
  <data name="getreturniddetail" xml:space="preserve">
    <value>select ms.returnid,ms.materialid,ygs.materialdescription,ms.returnqty,ms.remarks
from wms.wms_materialreturndetails ms
left outer join  wms."MaterialMasterYGS" ygs on ygs.material = ms.materialid
left outer join wms.wms_materialreturn mrs on mrs.returnid = ms.returnid 
where ms.returnid = '#rtid'</value>
  </data>
  <data name="getitemlocationforstocktransfer" xml:space="preserve">
    <value>select sum(sk.availableqty)as availableqty,sk.materialid,sk.itemlocation,Max(ygs.materialdescription) as materialdescription 
from wms.wms_stock sk 
left outer join wms."MaterialMasterYGS" ygs on ygs.material=sk.materialid 
where sk.materialid='#materialid'
and sk.availableqty&gt;0 
group by sk.itemlocation,sk.materialid order by Max(sk.createddate)</value>
  </data>
  <data name="getItemlocationListByGatepassmaterialid_v1" xml:space="preserve">
    <value>select iss.issuedqty,sk.pono,sk.materialid,sk.itemid,sk.itemlocation,
(select sum(sk1.availableqty) from wms.wms_stock sk1 where sk1.materialid = sk.materialid and sk1.itemlocation = sk.itemlocation) as availableqty
,sk.createddate::DATE,
ygs.materialdescription
from wms.wms_materialissue iss 
left outer join wms.wms_stock sk on iss.itemid =sk.itemid
left join wms."MaterialMasterYGS" ygs on ygs.material=sk.materialid 
where iss.gatepassmaterialid = '#gatepassmaterialid'</value>
  </data>
  <data name="getMaterialsforreceipt" xml:space="preserve">
    <value>select mat.pono,mat.materialid as material,mat.itemno::text as lineitemno,ms.materialdescription,mat.materialqty,'#invoice' as invoiceno,'#inw' as inwmasterid,NULL as grnnumber,ms.qualitycheck
from wms.wms_pomaterials mat
left outer join wms."MaterialMasterYGS" ms on ms.material = mat.materialid</value>
  </data>
  <data name="getpobyinwardmasterid" xml:space="preserve">
    <value>select pono from wms.wms_securityinward where inwmasterid ='#inw' </value>
  </data>
  <data name="getponobygrn" xml:space="preserve">
    <value>select pono from wms.wms_securityinward where grnnumber = '#grn'</value>
  </data>
  <data name="isgrnexistbyinwardmasterid" xml:space="preserve">
    <value>select inwmasterid,grnnumber,onhold,unholdedby from wms.wms_securityinward where inwmasterid = '#inw' </value>
  </data>
  <data name="InsertInitialStock" xml:space="preserve">
    <value>INSERT INTO wms.st_initialstock (material,materialdescription,store,rack,bin,quantity,grn,
								 receiveddate,shelflifeexpiration,dateofmanufacture,dataenteredon,
								 datasource,dataenteredby,createddate,DataloadErrors,error_description,stocktype,
								 category,unitprice,projectid,pono,value,uploadedby,uploadbatchcode,uploadedfilename) values (@material,@materialdescription,@store,
															@rack,@bin,@quantity,@grn,@receiveddate,@shelflifeexpiration,
															@dateofmanufacture,@dataenteredon,@datasource,
															@dataenteredby,@createddate,@DataloadErrors,@error_description,
															@stocktype,@category,@unitprice,@projectid,@pono,@value,@uploadedby,@uploadbatchcode,@uploadedfilename)</value>
  </data>
  <data name="initialstockviewdata" xml:space="preserve">
    <value>select st.materialid as material,mat.materialdescription,loc.locatorname,rac.racknumber,bn.binnumber,st.availableqty,st.value,st.projectid,st.pono,st.shelflife from wms.wms_stock st 
left outer join wms."MaterialMasterYGS" mat on mat.material = st.materialid
left outer join wms.wms_rd_locator loc on loc.locatorid = st.storeid
left outer join wms.wms_rd_rack rac on rac.rackid = st.rackid
left outer join wms.wms_rd_bin bn on bn.binid = st.binid
where st.initialstock is True and st.uploadbatchcode = '#code'</value>
  </data>
  <data name="dynamicemaildata" xml:space="preserve">
    <value>select auth.employeeid,rl.email from  wms.auth_users auth
 left outer join wms.employee rl on auth.employeeid = rl.employeeno 
 where auth.roleid = #roleid and auth.emailnotification is True</value>
  </data>
  <data name="initialstockExceptions" xml:space="preserve">
    <value>select material,materialdescription,store as locatorname,rack as racknumber,bin as binnumber,quantity as availableqty,value,projectid,pono,shelflifeexpiration as shelflife,
error_description as exceptions
from wms.st_initialstock
where dataloaderrors is True and uploadbatchcode = '#code'</value>
  </data>
  <data name="getallinitialstockdata" xml:space="preserve">
    <value>select material,materialdescription,store as locatorname,rack as racknumber,bin as binnumber,quantity as availableqty,value,projectid,pono,shelflifeexpiration as shelflife,
error_description as exceptions
from wms.st_initialstock
where uploadbatchcode = '#code'</value>
  </data>
  <data name="initialstockreport" xml:space="preserve">
    <value>select st.materialid as material,mat.materialdescription,loc.locatorname,rac.racknumber,bn.binnumber,st.availableqty,st.value,st.projectid,st.pono,st.shelflife from wms.wms_stock st 
left outer join wms."MaterialMasterYGS" mat on mat.material = st.materialid
left outer join wms.wms_rd_locator loc on loc.locatorid = st.storeid
left outer join wms.wms_rd_rack rac on rac.rackid = st.rackid
left outer join wms.wms_rd_bin bn on bn.binid = st.binid
where st.initialstock is True and st.createdby = '#code'</value>
  </data>
  <data name="initialstockreportgroupby" xml:space="preserve">
    <value>select st.uploadbatchcode,Max(st.uploadedfilename) as uploadedfilename,Max(st.createddate) as createddate,
Count(*) as totalrecords,
(select count(*) from wms.st_initialstock where dataloaderrors is True and uploadbatchcode = st.uploadbatchcode) as exceptionrecords,
(select count(*) from wms.wms_stock where uploadbatchcode = st.uploadbatchcode) as successrecords
from wms.st_initialstock 
st where st.uploadedby = '#code' group by st.uploadbatchcode</value>
  </data>
  <data name="inhandmaterial" xml:space="preserve">
    <value>Select st.materialid as material,Max(mat.materialdescription)  as materialdescription, SUM(st.availableqty) as availableqty,
(Max(mat.unitprice) * SUM(st.availableqty)) as value
from wms.wms_stock st left outer join wms."MaterialMasterYGS" mat on mat.material = st.materialid group by st.materialid</value>
  </data>
  <data name="inhandmateriallocation" xml:space="preserve">
    <value>select itemlocation,SUM(availableqty) as quantity from wms.wms_stock where materialid = '#material' and availableqty &gt; 0
group by itemlocation</value>
  </data>
  <data name="initialstockloadgroupby" xml:space="preserve">
    <value>select st.uploadbatchcode,Max(st.uploadedfilename) as uploadedfilename,Max(st.createddate) as createddate,Max (e.name ) as createdby,
 Max (st.createddate ) as createddate ,
Count(*) as totalrecords,
(select count(*) from wms.st_initialstock where dataloaderrors is True and uploadbatchcode = st.uploadbatchcode) as exceptionrecords,
(select count(*) from wms.wms_stock where uploadbatchcode = st.uploadbatchcode) as successrecords 
from wms.st_initialstock st 
left outer join wms.employee e on e.employeeno = st.uploadedby 
group by st.uploadbatchcode</value>
  </data>
  <data name="materiallablestaginginsert" xml:space="preserve">
    <value>INSERT INTO wms.WMS_ST_MaterialLabel(po,polineitemno,mscode,saleorderno,solineitemno,insprec,linkageno,grno,codetype,description,error_description,isloaderror,uploadcode,vendorcode,vendorname,materialid,materialdescription,materialqty,itemdeliverydate,projectcode,assetno,assetsubno,costcenter) values
(@po,@polineitemno,@mscode,@saleorderno,@solineitemno,@insprec,@linkageno,@grno,@codetype,@description,@error_description,@isloaderror,@uploadcode,@vendorcode,@vendorname,@materialid,@materialdescription,@materialqty,@itemdeliverydate,@projectcode,@assetno,@assetsubno,@costcenter)</value>
  </data>
  <data name="insertauditlog" xml:space="preserve">
    <value>insert into wms.AuditLog(id,filename,filelocation,uploadedon,uploadedby,uploadedto,modulename) 
 values (default,@filename,@filelocation,@uploadedon,@uploadedby,@uploadedto,@modulename)</value>
  </data>
  <data name="updatepoformatlabel" xml:space="preserve">
    <value>update wms.wms_pomaterials set podescription = @podescription,mscode = @mscode, saleorderno = @saleorderno,
solineitemno = @solineitemno, linkageno = @linkageno,grno = @grno,codetype = @codetype,uploadcode = @uploadcode,
assetno = @assetno,assetsubno = @assetsubno,costcenter = @costcenter
where id = #idx</value>
  </data>
  <data name="GetGRReportDataList" xml:space="preserve">
    <value>select sg.wmsgr,sg.sapgr,sg.updatedby ,sg.updatedon,si.pono from wms.wms_sapgr sg
left outer join  wms.wms_securityinward si on si.grnnumber = sg.wmsgr</value>
  </data>
  <data name="addGRReports" xml:space="preserve">
    <value>insert into wms.wms_sapgr (sapgr) values (@sapgr)</value>
  </data>
  <data name="editGRReports" xml:space="preserve">
    <value>select sg.wmsgr,sg.sapgr,sg.updatedby ,sg.updatedon,si.pono from wms.wms_sapgr sg
left outer join  wms.wms_securityinward si on si.grnnumber = sg.wmsgr where wmsgr = #wmsgr</value>
  </data>
  <data name="addSAPGR" xml:space="preserve">
    <value>update wms.wms_sapgr set sapgr = '#sapgr' where wmsgr = '#wmsgr'</value>
  </data>
  <data name="insertpoformatlabel" xml:space="preserve">
    <value>insert into wms.wms_pomaterials (pono, materialid, materialdescription,materialqty,itemno,itemdeliverydate,podescription,
								mscode,saleorderno,solineitemno,linkageno,grno,codetype,uploadcode,assetno,assetsubno,costcenter)
values (@pono, @materialid, @materialdescription,@materialqty,@itemno,@itemdeliverydate,@podescription,@mscode,@saleorderno,@solineitemno,
	   @linkageno,@grno,@codetype,@uploadcode,@assetno,@assetsubno,@costcenter)</value>
  </data>
  <data name="directtransfermatdetail" xml:space="preserve">
    <value>select tsd.inwmasterid,tsd.materialid,SUM(tsd.confirmqty) as confirmqty,mat.materialdescription
from wms.wms_storeinward tsd
left outer join wms."MaterialMasterYGS" mat on mat.material = tsd.materialid
where tsd.inwmasterid = '#inw'
group by tsd.inwmasterid,tsd.materialid,mat.materialdescription</value>
  </data>
  <data name="directtransferreportmainquery" xml:space="preserve">
    <value>select ts.inwmasterid, ts.projectcode,ts.mrnremarks ,ts.grnnumber,Max(emp.name) as mrnby,Max(ts.mrnon) as mrnon,
prj.projectmanager
from wms.wms_securityinward ts
left outer join wms.employee emp on emp.employeeno = ts.mrnby
left outer join wms.wms_project prj on prj.projectcode = ts.projectcode
where ts.mrnby is not null and prj.projectmanager = '#empno'
group by ts.inwmasterid, ts.projectcode,ts.mrnremarks ,ts.grnnumber,
prj.projectmanager</value>
  </data>
  <data name="getmateriallistforTracking" xml:space="preserve">
    <value>select SUM(stk.availableqty) availableqty,SUM(inw.confirmqty) confirmqty,inw.materialid,Max(mat.materialdescription) as materialdescription,
 (select sum(iss.issuedqty) from wms.wms_materialissue iss 
  left outer join wms.wms_stock sk on sk.itemid= iss.itemid where  sk.materialid = inw.materialid and sk.inwmasterid = sec.inwmasterid) as issuedqty,
  (select sum(res.reservequantity) from wms.materialreservedetails res 
 left outer join wms.wms_stock sk1 on sk1.itemid= res.itemid where  sk1.materialid = inw.materialid and sk1.inwmasterid = sec.inwmasterid) as reservedqty
 from wms.wms_stock stk
 left outer join wms.wms_storeinward inw on inw.inwardid=stk.inwardid
 left outer join wms.wms_securityinward sec on inw.inwmasterid=sec.inwmasterid
 left outer join wms."MaterialMasterYGS" mat on mat.material=inw.materialid
  where sec.grnnumber ='#grn' and inw.pono = '#pono' 
 group by inw.materialid, inw.pono,sec.inwmasterid</value>
  </data>
  <data name="materialTrackingissedDetail" xml:space="preserve">
    <value>select iss.issuedqty,iss.gatepassmaterialid,mrq.requestid,iss.requestmaterialid,stk.itemlocation as issuelocation,sinw.grnnumber,stinw.materialid,
 emp.name as requestername,mrq.requesteddate,iss.itemissueddate as issuedon,emp1.name as issuedby,mrq.ackstatus,
 gtp.gatepasstype,gtp.requestedby as gatepassrequestedby,gtp.requestedon as gatepassrequesteddate,
 emp2.name as mgapprover,emp3.name as fmapprover,mat.materialdescription
 from wms.wms_materialissue iss
 left outer join wms.wms_stock stk on iss.itemid = stk.itemid
 left outer join wms.wms_storeinward stinw on stinw.inwardid = stk.inwardid
 left outer join wms.wms_securityinward sinw on sinw.inwmasterid = stinw.inwmasterid
 left outer join wms.materialrequestdetails mr on mr.id = iss.requestmaterialid
 left outer join  wms.materialrequest mrq  on mrq.requestid = mr.requestid
 left outer join wms.wms_gatepassmaterial gm on gm.gatepassmaterialid = iss.gatepassmaterialid
 left outer join  wms.wms_gatepass gtp  on gtp.gatepassid = gm.gatepassid
 left outer join  wms.employee emp  on mrq.requesterid = emp.employeeno
 left outer join  wms.employee emp1  on iss.approvedby = emp1.employeeno
 left outer join  wms.employee emp2  on gtp.approverid = emp2.employeeno
 left outer join  wms.employee emp3  on gtp.fmapproverid = emp3.employeeno
 left outer join wms."MaterialMasterYGS" mat on mat.material=stinw.materialid
 where stinw.materialid = '#material' and sinw.grnnumber = '#grno' and stinw.pono = '#pono'</value>
  </data>
  <data name="materialtrackingReservedlist" xml:space="preserve">
    <value>select iss.reservequantity,mrq.reserveid,sinw.grnnumber,stinw.materialid,mrq.projectcode,mrq.reserveupto,mat.materialdescription,
 emp.name as reservedby,mrq.reservedon,stk.itemlocation as issuelocation,
 CASE
     WHEN mrq.reserveupto::date &lt; current_date THEN
	 'Expired'
     WHEN mrq.requestedby is NOT NULL THEN
	  'Requested'
	 ELSE 'Reserved'
  END as ackstatus
 from  wms.materialreservedetails iss
 left outer join wms.materialreserve mrq on iss.reserveid = mrq.reserveid
 left outer join wms.wms_stock stk on iss.itemid = stk.itemid
 left outer join wms.wms_storeinward stinw on stinw.inwardid = stk.inwardid
 left outer join wms.wms_securityinward sinw on sinw.inwmasterid = stinw.inwmasterid
 left outer join  wms.employee emp  on mrq.reservedby = emp.employeeno
 left outer join wms."MaterialMasterYGS" mat on mat.material=stinw.materialid
 where stinw.materialid = '#material' and sinw.grnnumber = '#grno' and stinw.pono = '#pono'</value>
  </data>
  <data name="insertqtso" xml:space="preserve">
    <value>INSERT INTO wms.st_qtso(
	id, saleorderno, solineitemno, saleordertype, customername, shipto, shippingpoint, loadingdate, projectiddef, partno, custpo, uploadcode, uploadedon,error_description,isloaderror,projecttext)
	VALUES (default, @saleorderno, @solineitemno, @saleordertype, @customername, @shipto, @shippingpoint, @loadingdate, @projectiddef, @partno, @custpo, @uploadcode, @uploadedon,@error_description,@isloaderror,@projecttext)</value>
  </data>
  <data name="insertstserialimport" xml:space="preserve">
    <value>INSERT INTO wms.st_slno_imports(
	id, saleorderno, solineitemno, material, gr, plant, serialno, uploadcode, uploadedon,error_description,isloaderror)
	VALUES (default,@saleorderno, @solineitemno, @material, @gr, @plant, @serialno, @uploadcode, @uploadedon,@error_description,@isloaderror)</value>
  </data>
  <data name="updatepomatbrserialexcel" xml:space="preserve">
    <value>update wms.wms_pomaterials set material = @material,plant = @plant,gr = @gr
   where  saleorderno = '#sono' and solineitemno = '#solineitemno'</value>
  </data>
  <data name="updatepomatbyqtsoexcel" xml:space="preserve">
    <value>update wms.wms_pomaterials set saleordertype = @saleordertype,customername = @customername,shippingpoint = @shippingpoint,
	loadingdate = @loadingdate,projectiddef = @projectiddef,partno = @partno,custpo=@custpo,shipto=@shipto,
	projecttext = @projecttext
    where  saleorderno = '#sono' and solineitemno = '#solineitemno'</value>
  </data>
</root>